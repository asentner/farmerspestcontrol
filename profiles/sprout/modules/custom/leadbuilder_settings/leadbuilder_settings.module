<?php

/**
 * Implements hook_boot().
 */
function leadbuilder_settings_boot() {
    $GLOBALS['conf']['maintenance_theme'] = 'adminimal';
    $adminimal_settings = variable_get('theme_adminimal_settings', array());
    $adminimal_settings['logo_path'] = 'profiles/sprout/images/sprowt-logo.png';
    $adminimal_settings['default_logo'] = false;
    //variable_set('theme_adminimal_settings', $adminimal_settings);
    $GLOBALS['conf']['theme_adminimal_settings'] = $adminimal_settings;
    if(defined('MAINTENANCE_MODE') && !empty(MAINTENANCE_MODE)) {
        if(function_exists('drupal_add_css')) {
            drupal_add_css('profiles/sprout/css/maintenence.css');
        }
    }
}

/**
 * Implements hook_menu().
 */
function leadbuilder_settings_menu()
{
    $items = array();

    $items['<phone_number>'] = array(
        'page callback' => 'drupal_not_found',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/system/leadbuilder-settings'] = array(
        'title' => 'Sprowt Settings',
        'description' => 'Company specific settings for the Sprowt platform. Including address, company name, and social media accounts.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('leadbuilder_settings_admin'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'leadbuilder_settings.pages.inc'
    );

    return $items;
}

/**
 * Implements hook_init().
 */
function leadbuilder_settings_init()
{
    drupal_add_js(array(
        'leadbuilder' => array(
            'ctmAccountId' => variable_get('leadbuilder_ctm_account_id'),
        )
    ), 'setting');
}

/**
 * Implements hook_theme().
 */
function leadbuilder_settings_theme()
{
    return array(
        'leadbuilder_settings_address' => array(
            'variables' => array(),
            'template' => 'leadbuilder_settings_address',
            'path' => drupal_get_path('module', 'leadbuilder_settings') . '/theme',
        ),
        'leadbuilder_settings_social_media' => array(
            'variables' => array(),
            'template' => 'leadbuilder_settings_social_media',
            'path' => drupal_get_path('module', 'leadbuilder_settings') . '/theme',
        ),
        'leadbuilder_settings_copyright' => array(
            'variables' => array(),
            'template' => 'leadbuilder_settings_copyright',
            'path' => drupal_get_path('module', 'leadbuilder_settings') . '/theme',
        ),
    );
}

/**
 * Implements hook_block_info().
 */
function leadbuilder_settings_block_info()
{
    $blocks['leadbuilder_social_media'] = array(
        'info' => t('Sprowt: Footer social media'),
    );
    /*
     * We no longer use a site wide location
     *
    $blocks['leadbuilder_address'] = array(
      'info' => t('Sprowt: Footer address'),
    );
    */
    $blocks['leadbuilder_copyright'] = array(
        'info' => t('Sprowt: Footer copyright'),
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function leadbuilder_settings_block_view($delta = '')
{
    $block = array();

    switch ($delta) {
        case 'leadbuilder_social_media':
            $block['content'] = theme('leadbuilder_settings_social_media');
            break;
        /*
         * We no longer use a site wide location
         *
          case 'leadbuilder_address':
            $block['content'] = theme('leadbuilder_settings_address');
            break;
        */
        case 'leadbuilder_copyright':
            $block['content'] = theme('leadbuilder_settings_copyright');
            break;
    }

    return $block;
}

//Grabs and converts phone number to readable format.
function leadbuilder_settings_get_phone_number($replace = null)
{
    if (function_exists('leadbuilder_geoip_get_phone')) {
        $phone = leadbuilder_geoip_get_phone();
    }

    if (empty($phone)) {
        $phone = variable_get('leadbuilder_settings_phone_number', '');
    }

    return leadbuilder_settings_format_phone($phone, $replace);
}

/**
 * To alter the phone number pattern in template.php or module, see example:
 *
 *  function hook_leadbuilder_phone_pattern_alter(&$replace)
 *
 */
function leadbuilder_settings_format_phone($phone, $replace = null) {
    if (null === $replace) {
        drupal_alter('leadbuilder_phone_pattern', $replace);
    }

    if(empty($replace)) {
        $replace = "$1-$2-$3";
    }
    return preg_replace("/.*(\d{3})[^\d]{0,7}(\d{3})[^\d]{0,7}(\d{4}).*/", $replace, $phone);
}

//Takes a string a replaces shortcodes with values in that string
function _leadbuilder_settings_shortcode_replace($string)
{
    $shortcodes = array(
        '[company-name]' => variable_get('leadbuilder_settings_company_name'),
        '[phone-number]' => '<a href="tel:+1'.leadbuilder_settings_get_phone_number('$1$2$3').'">'.leadbuilder_settings_get_phone_number().'</a>',
        '[twitter]' => variable_get('leadbuilder_settings_twitter_handle'),
        '[facebook]' => variable_get('leadbuilder_settings_facebook_url'),
        '[linkedin]' => variable_get('leadbuilder_settings_linkedin_url'),
        '[google+]' => variable_get('leadbuilder_settings_gplus_url'),
        '[node-service]' => _leadbuilder_settings_node_service(),
        '[year]' => date('Y'),
    );

    foreach ($shortcodes as $code => $value) {
        $string = str_replace($code, $value, $string);
    }

    $maps_found = preg_match_all('/((<p>)?\[map[\s]?(.*?)\](<\/p>)?)/', $string, $maps);


    if($maps_found){
        foreach($maps[0] as $map) {
            if(preg_match('/((?:<p>)?\[map[\s]?(.*?)\](?:<\/p>)?)/', $map, $m)) {
                if (preg_match('/src=([^\s\]]+)/', $m[2], $s)) {
                    $link = $s[1];
                }
                else {
                    $link = variable_get('leadbuilder_settings_map_embed', '');
                }

                if (preg_match('/.*google.*maps.*[\?|\&]mid=([^\&\"]+)/', $link, $l)) {
                    $mid = $l[1];
                    $link = '//www.google.com/maps/d/embed?mid=' . $mid;
                }

                if (preg_match('/.*google.*\/maps\/place\/(.*)\/@([\d\.-]+),([\d\.-]+),/', $link, $l)) {
                    $key = 'AIzaSyAdbUlxjFZ56MzUB_E8I3x1nSn0mJ-YCKI';
                    $link = "https://www.google.com/maps/embed/v1/place?key=$key&q={$l[1]}&center={$l[2]},{$l[3]}";
                    if(empty($m[2]) || strpos($m[2],'zoom=') === false) {
                        $link .= '&zoom=15';
                    }
                }

                if(empty($link)) {
                    $html = '';

                    global $user;
                    if($user->uid) {
                        $html = "<div style=\"text-align: center; padding: 20px;\">[[  Map link missing. Go <a href=\"/admin/config/system/leadbuilder-settings\">here</a> to set it.  ]]</div>";
                    }

                    $string = str_replace($m[1], $html, $string);
                    return $string;
                }

                if (!empty($m[2])) {

                    if (preg_match('/src=([^\s\]]+)/', $m[2], $s)) {

                        $src_parts = explode('?', $s[1]);

                        $src_params = explode('&',str_replace('&amp;','&',$src_parts[1]));

                        if(!empty($src_params[1])) {
                            unset($src_params[0]);
                            $m[2] .= ' ' . implode(' ',$src_params);
                        }

                        $m[2] = str_replace('src=' . $s[1], '', $m[2]);
                    }

                    $params = trim(str_replace(" ", "&", trim($m[2])), "&");
                    if(!empty($params)) {
                        if (strpos($link, '?') !== FALSE) {
                            $link .= '&amp;' . $params;
                        }
                        else {
                            $link .= '?' . $params;
                        }
                    }
                }

                $html = '<div class="media_embed map-embed"><iframe src="' . $link . '"></iframe></div>';
                $string = str_replace($m[1], $html, $string);
            }
        }
    }

    return $string;
}

//Grabs the current node service
function _leadbuilder_settings_node_service()
{
    $node = menu_get_object();
    if (!empty($node->field_service[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($node->field_service[LANGUAGE_NONE][0]['tid']);
        if (empty($term)) {
            return '';
        }
        return $term->name;
    }
    else {
        return '';
    }
}

function leadbuilder_settings_preprocess_page(&$variables)
{

}

// implements hook_preprocess_block()
function leadbuilder_settings_preprocess_block(&$variables)
{
    if (!path_is_admin(current_path())) {
        if (!empty($variables['elements']['#block']->subject)) {
            $variables['elements']['#block']->subject = _leadbuilder_settings_shortcode_replace($variables['elements']['#block']->subject);
        }
        $variables['content'] = _leadbuilder_settings_shortcode_replace($variables['content']);
    }
}

// implements hook_preprocess_node()
function leadbuilder_settings_preprocess_node(&$variables)
{
    if (!path_is_admin(current_path())) {
        if (!empty($variables['title'])) {
            $variables['title'] = _leadbuilder_settings_shortcode_replace($variables['title']);
        }

        if (!empty($variables['content']['body']['0']['#markup'])) {
            $variables['content']['body']['0']['#markup'] = _leadbuilder_settings_shortcode_replace($variables['content']['body']['0']['#markup']);
        }
    }
}

function leadbuilder_settings_tokens_alter(&$replacements, $context)
{
    $options = $context['options'];

    if (isset($options['language'])) {
        $url_options['language'] = $options['language'];
        $language_code = $options['language']->language;
    }
    else {
        $language_code = NULL;
    }
    $sanitize = !empty($options['sanitize']);

    if ($context['type'] == 'node' && !empty($context['data']['node'])) {
        $node = $context['data']['node'];

        // Alter the [node:title] token
        if (isset($context['tokens']['title'])) {
            $replacements[$context['tokens']['title']] = _leadbuilder_settings_shortcode_replace($replacements[$context['tokens']['title']]);
        }
    }
}

function ___get_states()
{
    return array(
        'AL' => 'Alabama',
        'AK' => 'Alaska',
        'AZ' => 'Arizona',
        'AR' => 'Arkansas',
        'CA' => 'California',
        'CO' => 'Colorado',
        'CT' => 'Connecticut',
        'DE' => 'Delaware',
        'DC' => 'District Of Columbia',
        'FL' => 'Florida',
        'GA' => 'Georgia',
        'HI' => 'Hawaii',
        'ID' => 'Idaho',
        'IL' => 'Illinois',
        'IN' => 'Indiana',
        'IA' => 'Iowa',
        'KS' => 'Kansas',
        'KY' => 'Kentucky',
        'LA' => 'Louisiana',
        'ME' => 'Maine',
        'MD' => 'Maryland',
        'MA' => 'Massachusetts',
        'MI' => 'Michigan',
        'MN' => 'Minnesota',
        'MS' => 'Mississippi',
        'MO' => 'Missouri',
        'MT' => 'Montana',
        'NE' => 'Nebraska',
        'NV' => 'Nevada',
        'NH' => 'New Hampshire',
        'NJ' => 'New Jersey',
        'NM' => 'New Mexico',
        'NY' => 'New York',
        'NC' => 'North Carolina',
        'ND' => 'North Dakota',
        'OH' => 'Ohio',
        'OK' => 'Oklahoma',
        'OR' => 'Oregon',
        'PA' => 'Pennsylvania',
        'RI' => 'Rhode Island',
        'SC' => 'South Carolina',
        'SD' => 'South Dakota',
        'TN' => 'Tennessee',
        'TX' => 'Texas',
        'UT' => 'Utah',
        'VT' => 'Vermont',
        'VA' => 'Virginia',
        'WA' => 'Washington',
        'WV' => 'West Virginia',
        'WI' => 'Wisconsin',
        'WY' => 'Wyoming',
    );
}

/**
 * implements hook_filter_info_alter()
 *
 * Used to replace the url filter process function with our own so it ignores info in brackets so we can use our own shortcodes
 */
function leadbuilder_settings_filter_info_alter(&$filters) {
    $filters['filter_url']['process callback'] = '_leadbuilder_settings_filter_url';
}

/**
 *
 * custom replacement for _filter_url()
 * https://api.drupal.org/api/drupal/modules!filter!filter.module/function/_filter_url/7
 * 
 */
function _leadbuilder_settings_filter_url($text, $filter){
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // Pass length to regexp callback.
  _filter_url_trim(NULL, $filter->settings ['filter_url_length']);

  // Create an array which contains the regexps for each type of link.
  // The key to the regexp is the name of a function that is used as
  // callback function to process matches of the regexp. The callback function
  // is to return the replacement for the match. The array is used and
  // matching/replacement done below inside some loops.
  $tasks = array();

  // Prepare protocols pattern for absolute URLs.
  // check_url() will replace any bad protocols with HTTP, so we need to support
  // the identical list. While '//' is technically optional for MAILTO only,
  // we cannot cleanly differ between protocols here without hard-coding MAILTO,
  // so '//' is optional for all protocols.
  // @see filter_xss_bad_protocol()
  $protocols = variable_get('filter_allowed_protocols', array('ftp', 'http', 'https', 'irc', 'mailto', 'news', 'nntp', 'rtsp', 'sftp', 'ssh', 'tel', 'telnet', 'webcal'));
  $protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

  // Prepare domain name pattern.
  // The ICANN seems to be on track towards accepting more diverse top level
  // domains, so this pattern has been "future-proofed" to allow for TLDs
  // of length 2-64.
  $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
  $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
  $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
  $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

  // Prepare pattern for optional trailing punctuation.
  // Even these characters could have a valid meaning for the URL, such usage is
  // rare compared to using a URL at the end of or within a sentence, so these
  // trailing characters are optionally excluded.
  $punctuation = '[\.,?!]*?';

  // Match absolute URLs.
  $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
  $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
  $tasks ['_filter_url_parse_full_links'] = $pattern;

  // Match e-mail addresses.
  $url_pattern = "[A-Za-z0-9._-]{1,254}@(?:$domain)";
  $pattern = "`($url_pattern)`";
  $tasks ['_filter_url_parse_email_links'] = $pattern;

  // Match www domains.
  $url_pattern = "www\.(?:$domain)/?(?:$trail)?";
  $pattern = "`($url_pattern)($punctuation)`";
  $tasks ['_filter_url_parse_partial_links'] = $pattern;

  // Each type of URL needs to be processed separately. The text is joined and
  // re-split after each task, since all injected HTML tags must be correctly
  // protected before the next task.
  foreach ($tasks as $task => $pattern) {
    // HTML comments need to be handled separately, as they may contain HTML
    // markup, especially a '>'. Therefore, remove all comment contents and add
    // them back later.
    _filter_url_escape_comments('', TRUE);
    $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

    // Split at all tags; ensures that no tags or attributes are processed.
    $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
    // PHP ensures that the array consists of alternating delimiters and
    // literals, and begins and ends with a literal (inserting NULL as
    // required). Therefore, the first chunk is always text:
    $chunk_type = 'text';
    // If a tag of $ignore_tags is found, it is stored in $open_tag and only
    // removed when the closing tag is found. Until the closing tag is found,
    // no replacements are made.
    $open_tag = '';

    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // If there is a match, inject a link into this chunk via the callback
          // function contained in $task.
          
          
          //Pull out content in brackets temporarily so it can be ignored
          if(preg_match_all('/(\[[^\]]+\])/',$chunks[$i],$b)) {
            $brackets = array();
            foreach($b as $bi => $bracket){
                
                $brackets["[[$bi]]"] = $bracket[0];
                
                $chunks[$i] = str_replace($bracket[0],"[[$bi]]", $chunks[$i]);
            }
          }
          
          $chunks [$i] = preg_replace_callback($pattern, $task, $chunks [$i]);
          
          //reinsert our bracket info
          if(!empty($brackets)) {
            foreach($brackets as $replace=>$bracket) {
                $chunks[$i] = str_replace($replace, $bracket, $chunks[$i]);
            }
          }
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks [$i], $matches)) {
            $open_tag = $matches [1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks [$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }

    $text = implode($chunks);
    // Revert back to the original comment contents
    _filter_url_escape_comments('', FALSE);
    $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);
  }

  return $text;
}

/**
 * Menu alterations
 */

/**
 * Implementation of hook_theme_registry_alter()
 * We replace theme_menu_item_link with our own function.
 */
function leadbuilder_settings_theme_registry_alter(&$registry) {
    // Save previous value from registry in case another theme overwrites menu_item_link
    $registry['leadbuilder_settings_link_default'] = $registry['link'];
    $registry['link']['function'] = '_leadbuilder_settings_link';
}

/**
 * Override of theme_link()
 */
function _leadbuilder_settings_link(array $variables) {
    if (in_array($variables['path'], array('<phone_number>'))) {
        $phone = leadbuilder_settings_get_phone_number('$1$2$3');

        $variables['path'] = "tel:+1$phone";
    }

    // Call the original theme function for normal menu link.
    return theme('leadbuilder_settings_link_default', $variables);
}

/**
 * Implementation of hook_form_FROM_ID_alter()
 * Description changed, added phone_number as path types.
 */
function leadbuilder_settings_form_menu_edit_item_alter(&$form, &$form_state) {
    // Some menu items have a pre-defined path which cannot be modified hence no default_value
    if (isset($form['link_path']['#default_value'])) {
        $default_value = $form['link_path']['#default_value'];

        if (preg_match('/^<phone_number>\/[0-9]+$/', $default_value)) {
            $default_value = '<phone_number>';
        }

        $form['link_path']['#default_value'] = $default_value;
        $form['link_path']['#description'] .=  t(' Enter %p to automatically populate with tel link using site\'s phone number.', array('%p' => '<phone_number>'));
    }
}

function _leadbuilder_settings_get_address(){
    require_once drupal_get_path('profile','sprout') . '/includes/nodebuilder.php';
    $nid = db_query("
        SELECT nid
        FROM node n
        WHERE n.type = 'location'
        AND n.status = 1
        ORDER BY n.created ASC
    ")->fetchField();

    $location = new NodeBuilder(node_load($nid));

    $location_array = array(
        'street' => $location->field_street_address->value(),
        'locality' => $location->field_locality->value(),
        'province' => $location->field_state->value(),
        'postal_code' => $location->field_postal_code->value(),
    );

    return $location_array;
}