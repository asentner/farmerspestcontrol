<?php
/**
 * @file
 * Code for the Sprowt Solution Finder feature.
 */

include_once 'sprowt_solution_finder.features.inc';


/**
 * Implements hook_menu().
 */
function sprowt_solution_finder_menu()
{
    $items = array();
    $items['solution-finder'] = array(
        'page callback' => '_sprowt_solution_finder_find_solution',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Implements hook_theme().
 */
function sprowt_solution_finder_theme($existing, $type, $theme, $path)
{
    return array(
        'sprowt_solution_finder_block' => array(
            'variables' => array(
                'concerns' => array(),
                'shown' => null,
                'form_id' => ''
            ),
            'path' => $path . '/theme',
            'template' =>  'sprowt-solution-finder-block'
        ),
        'sprowt_solution_finder_concern_modals' => array(
            'variables' => array(
                'concerns' => array(),
                'scmId' => null
            ),
            'path' => $path . '/theme',
            'template' =>  'sprowt-solution-concern-modals'
        ),
        'node__solution__full' => array (
            'template' => 'node--solution--full',
            'path' => $path . '/theme',
            'base hook' => 'node',
        ),
        'field__field_hero_image__solution' => array (
            'template' => 'field--field-hero-image--solution',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'field__field_learn_more_link__solution' => array (
            'template' => 'field--field-learn-more-link--solution',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'page__node__solution' => array (
            'template' => 'page--node--solution',
            'path' => $path . '/theme',
            'base hook' => 'page',
        ),
        'field__field_plan_features_header' => array (
            'template' => 'field--field-plan-features-header',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'paragraphs_item__plan_information' => array (
            'template' => 'paragraphs-item--plan-information',
            'path' => $path . '/theme',
            'base hook' => 'paragraphs_item',
        ),
    );
}

/**
 * Implements hook_theme_registry_alter().
 */
function sprowt_solution_finder_theme_registry_alter(&$theme_registry) {
    ksort($theme_registry);
    $something = 'something';
}

/**
 * Implements hook_block_info().
 */
function sprowt_solution_finder_block_info()
{
    return array(
        'solution_finder' => array(
            'info' => t('Solution Finder'),
            'cache' => DRUPAL_NO_CACHE
        ),
    );
}

/**
 * Implements hook_block_view().
 */
function sprowt_solution_finder_block_view($delta = '')
{
    $modulePath = drupal_get_path('module', 'sprowt_solution_finder');
    $block = array();
    switch ($delta) {
        case 'solution_finder':
            $concern_nids = db_query("
                SELECT n.nid
                FROM node n
                LEFT JOIN weight_weights w on w.entity_type = 'node' AND w.entity_id = n.nid
                WHERE type = 'concern'
                AND status = 1
                ORDER BY w.weight ASC
            ")->fetchCol();
            $concerns = node_load_multiple($concern_nids);

            $arrays = array();
            foreach($concerns as $concern) {
                $array = array(
                    'nid' => $concern->nid,
                    'name' => $concern->title,
                    'icon' => field_view_field('node', $concern, 'field_icon_file', array(
                        'label' => 'hidden'
                    ))
                );
                $arrays[] = $array;
            }
            
            if(empty($arrays)) {
                return array();
            }

            $id = drupal_html_id('solution-finder-form');

            $block['content'] = array(
                '#markup' => theme('sprowt_solution_finder_block', array(
                    'concerns' => $arrays,
                    'shown' => 6,
                    'form_id' => $id
                )),
                '#attached' => array(
                    'css' => array(
                        $modulePath . '/css/solution_finder.css'
                    ),
                    'js' => array(
                        $modulePath . '/js/solution-finder.js'
                    ),
                ),
            );

            break;
    }

    return $block;
}

function _sprowt_solution_finder_find_solution() {
    $concerns = $_GET['concerns'];
    $default_nid = _sprowt_solution_finder_find_default_solution_nid();

    if(empty($concerns)) {
        //no concerns selected! Go to default solution.
        drupal_goto('node/' . $default_nid);
    }


    //grab all published solutions to filter.
    $solution_nids = db_query("
        SELECT nid
        FROM node
        WHERE type = 'solution'
        AND status = '1'
        ORDER BY created ASC
    ")->fetchCol();

    $solutions = node_load_multiple($solution_nids);

    //convert to entity_metadata_wrappers
    $foundSolutions = array();
    foreach($solutions as $node) {
        $foundSolutions[] = entity_metadata_wrapper('node', $node);
    }

    $concernsToNids = function($concerns) {
        $nids = array();
        foreach($concerns as $concern) {
            $nids[] = $concern->nid;
        }
        return $nids;
    };

    //find solutions with all of the concerns
    foreach($concerns as $concern) {
        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(!in_array($concern, $nids)) {
                unset($foundSolutions[$key]);
            }
        }
    }

    if(!empty($foundSolutions)) {

        //find most specific solution
        $foundSolutions = array_values($foundSolutions);
        $first = $foundSolutions[0];
        $nids = $concernsToNids($first->field_concerns->value());
        $lowScore = count($nids);
        $prevKey = 0;


        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(count($nids) <= $lowScore) {
                $lowScore = count($nids);
                if($key != 0) {
                    unset($foundSolutions[$prevKey]);
                }
                $prevKey = $key;
            }
            else {
                unset($foundSolutions[$key]);
            }
        }

        //if multiple ones are still found, just grab the last one (most recently created)
        $solution = array_pop($foundSolutions);
        $solution_nid = $solution->raw()->nid;
    }
    else {
        //none found with all concerns. Use default.
        $solution_nid = $default_nid;
    }

    drupal_goto('node/' . $solution_nid, array(
        'query' => array(
            'concerns' => $concerns
        ),
    ));


}

function _sprowt_solution_finder_find_default_solution_nid() {
    $nid = db_query("
        SELECT n.nid
        FROM node n
        LEFT JOIN field_data_field_is_default d on d.entity_id = n.nid
        WHERE n.status = 1
        AND n.type = 'solution'
        AND d.field_is_default_value IS NOT NULL
        AND d.field_is_default_value != '0'
        ORDER BY n.changed DESC 
        LIMIT 1
    ")->fetchField();

    if(!empty($nid)) {
        return $nid;
    }

    $nids = entity_get_id_by_uuid('node', array('934b332a-a247-41eb-ae2e-09dfe144aed3'));

    return array_shift($nids);
}

/**
 * Implements hook_sprowt_shortcode_replace_alter().
 */
function sprowt_solution_finder_sprowt_shortcode_replace_alter(&$shortcodes)
{
    $concern_nids = !empty($_GET['concerns']) ? $_GET['concerns'] : array();
    $solution = menu_get_object();
    if(empty($concern_nids)) {
        if ($solution && $solution->type == 'solution') {
            $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
            $concern_nids = array();
            foreach ($solution_concerns as $array) {
                $concern_nids[] = $array['target_id'];
            }
        }
    }

    $concernNames = array();

    if (!empty($concern_nids)) {
        $concerns = node_load_multiple($concern_nids);

        foreach ($concerns as $node) {
            $concernNames[] = $node->title;
        }
    }
    else {
        $concerns = array();
    }

    $all = false;
    $single = false;
    
    if($solution && $solution->type == 'solution') {
        $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
        if(count($solution_concerns) == 1) {
            $single = true;
        }

        if(count($solution_concerns) == count($concernNames)) {
            $all = true;
        }
        $shortcodes['[solution-title]'] = $solution->title;
    }

    $text = '';

    if(!empty($concernNames)) {
        if ($single) {
            $text = $concernNames[0];
        } elseif ($all) {
            $last = array_pop($concernNames);

            $text = implode(', ', $concernNames);
            $text .= ', and ' . $last;
        } else {
            $text = implode(', ', $concernNames);
            $text .= ', and More';
        }
    }

    if(!empty($text)) {
        $text = "<span class=\"concern-names\">$text</span>";
    }

    $shortcodes['[solution-concern-names]'] = $text;
}

/**
 * Implements hook_sprowt_shortcode_replace().
 */
function sprowt_solution_finder_sprowt_shortcode_replace($string)
{
    if(strpos($string, '[solution-concern-modals]') === false) {
        return $string;
    }

    $concern_nids = !empty($_GET['concerns']) ? $_GET['concerns'] : array();

    if(empty($concern_nids)) {
        $solution = menu_get_object();
        if ($solution && $solution->type == 'solution') {
            $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
            $concern_nids = array();
            foreach ($solution_concerns as $array) {
                $concern_nids[] = $array['target_id'];
            }
        }
    }

    if (!empty($concern_nids)) {
        $concerns = node_load_multiple($concern_nids);
    }
    else {
        $concerns = array();
    }


    if(!empty($concerns)) {
        $scmID = drupal_html_id('scm');
        $text = theme('sprowt_solution_finder_concern_modals', array(
            'concerns' => array_values($concerns),
            'scmID' => $scmID
        ));

        $path = drupal_get_path('module', 'sprowt_solution_finder');
        drupal_add_js($path . '/js/solution-concern-modals.js');
        drupal_add_css($path . '/css/solution_finder.css');
    }
    else {
        $text = '';
    }

    return str_replace('[solution-concern-modals]', $text, $string);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sprowt_solution_finder_preprocess_node(&$variables) {
    if($variables['view_mode'] == 'full' && $variables['node']->type == 'solution') {
        drupal_add_css(drupal_get_path('module', 'sprowt_solution_finder') . '/css/solution_finder.css');
    }
}