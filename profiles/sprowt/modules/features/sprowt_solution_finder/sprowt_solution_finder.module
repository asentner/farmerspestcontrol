<?php
/**
 * @file
 * Code for the Sprowt Solution Finder feature.
 */

include_once 'sprowt_solution_finder.features.inc';


/**
 * Implements hook_menu().
 */
function sprowt_solution_finder_menu()
{
    $items = array();
    $items['solution-finder'] = array(
        'page callback' => '_sprowt_solution_finder_find_solution',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Implements hook_theme().
 */
function sprowt_solution_finder_theme($existing, $type, $theme, $path)
{
    return array(
        'sprowt_solution_finder_block' => array(
            'variables' => array(
                'concerns' => array(),
                'shown' => null,
                'form_id' => ''
            ),
            'path' => $path . '/theme',
            'template' =>  'sprowt-solution-finder-block'
        ),
    );
}

/**
 * Implements hook_block_info().
 */
function sprowt_solution_finder_block_info()
{
    return array(
        'solution_finder' => array(
            'info' => t('Solution Finder'),
            'cache' => DRUPAL_NO_CACHE
        ),
    );
}

/**
 * Implements hook_block_view().
 */
function sprowt_solution_finder_block_view($delta = '')
{
    $modulePath = drupal_get_path('module', 'sprowt_solution_finder');
    $block = array();
    switch ($delta) {
        case 'solution_finder':
            $concern_nids = db_query("
                SELECT n.nid
                FROM node n
                LEFT JOIN weight_weights w on w.entity_type = 'node' AND w.entity_id = n.nid
                WHERE type = 'concern'
                AND status = 1
                ORDER BY w.weight ASC
            ")->fetchCol();
            $concerns = node_load_multiple($concern_nids);

            $arrays = array();
            foreach($concerns as $concern) {
                $array = array(
                    'nid' => $concern->nid,
                    'name' => $concern->title,
                    'icon' => field_view_field('node', $concern, 'field_icon_file', array(
                        'label' => 'hidden'
                    ))
                );
                $arrays[] = $array;
            }
            
            if(empty($arrays)) {
                return array();
            }

            $id = drupal_html_id('solution-finder-form');

            $block['content'] = array(
                '#markup' => theme('sprowt_solution_finder_block', array(
                    'concerns' => $arrays,
                    'shown' => 6,
                    'form_id' => $id
                )),
                '#attached' => array(
                    'css' => array(
                        $modulePath . '/css/solution_finder.css'
                    ),
                    'js' => array(
                        $modulePath . '/js/solution-finder.js'
                    ),
                ),
            );

            break;
    }

    return $block;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sprowt_solution_finder_preprocess_field(&$variables)
{
    $element = &$variables['element'];
    if($element['#field_name'] == 'field_icon_file') {
        $items = &$variables['items'];
        foreach($items as &$item) {
            if(strpos($item['#file']->filemime, 'svg') !== false) {
                $svg_html = file_get_contents(drupal_realpath($item['#file']->uri));
                $doc = new DOMDocument();
                $doc->loadXML($svg_html);
                $svg = $doc->getElementsByTagName('svg');
                $svg = $svg->item(0);
                if ($svg->hasAttribute('id')) {
                    $svg->removeAttribute('id');
                }
                $style = $svg->getAttribute('style');

                if (empty($style)) {
                    $style = array();
                } else {
                    $style = explode(';', $style);
                }
                
                if($svg->hasAttribute('viewBox')) {
                    $viewbox = $svg->getAttribute('viewBox');
                    $viewbox = explode(' ', $viewbox);
                    if(count($viewbox) == 1) {
                        $viewbox = array_pop($viewbox);
                        $viewbox = explode(',', $viewbox);
                    }
                    
                    if(count($viewbox) == 4) {
                        $width = $viewbox[2];
                        $height = $viewbox[3];
                        $svg->setAttribute('width', $width);
                        $svg->setAttribute('height', $height);
                    }
                }

                $style[] = 'min-width:5px';
                $style[] = 'height: auto';
                $style = implode(';', $style) . ';';

                $svg->setAttribute('style', $style);

                $html = $doc->saveHTML($svg);
            }
            else {
                $html = theme('image', array(
                    'path' => $item['#file']->uri
                ));
            }

            if(!empty($item['#path'])) {
                $path = $item['#path']['path'];
                $options = $item['#path']['options'];
                $options['html'] = true;
                $html = l($html, $path, $options);
            }
            $item = array(
                '#type' => 'markup',
                '#markup' => $html
            );
        }
    }
}

function _sprowt_solution_finder_find_solution() {
    $concerns = $_GET['concerns'];
    $default_nid = _sprowt_solution_finder_find_default_solution_nid();

    if(empty($concerns)) {
        //no concerns selected! Go to default solution.
        drupal_goto('node/' . $default_nid);
    }


    //grab all published solutions to filter.
    $solution_nids = db_query("
        SELECT nid
        FROM node
        WHERE type = 'solution'
        AND status = '1'
        ORDER BY created ASC
    ")->fetchCol();

    $solutions = node_load_multiple($solution_nids);

    //convert to entity_metadata_wrappers
    $foundSolutions = array();
    foreach($solutions as $node) {
        $foundSolutions[] = entity_metadata_wrapper('node', $node);
    }

    $concernsToNids = function($concerns) {
        $nids = array();
        foreach($concerns as $concern) {
            $nids[] = $concern->nid;
        }
        return $nids;
    };

    //find solutions with all of the concerns
    foreach($concerns as $concern) {
        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(!in_array($concern, $nids)) {
                unset($foundSolutions[$key]);
            }
        }
    }

    if(!empty($foundSolutions)) {

        //find most specific solution
        $foundSolutions = array_values($foundSolutions);
        $first = $foundSolutions[0];
        $nids = $concernsToNids($first->field_concerns->value());
        $lowScore = count($nids);
        $prevKey = 0;


        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(count($nids) <= $lowScore) {
                $lowScore = count($nids);
                if($key != 0) {
                    unset($foundSolutions[$prevKey]);
                }
                $prevKey = $key;
            }
            else {
                unset($foundSolutions[$key]);
            }
        }

        //if multiple ones are still found, just grab the last one (most recently created)
        $solution = array_pop($foundSolutions);
        $solution_nid = $solution->raw()->nid;
    }
    else {
        //none found with all concerns. Use default.
        $solution_nid = $default_nid;
    }

    drupal_goto('node/' . $solution_nid, array(
        'query' => array(
            'concerns' => $concerns
        ),
    ));


}

function _sprowt_solution_finder_find_default_solution_nid() {
    $nid = db_query("
        SELECT n.nid
        FROM node n
        LEFT JOIN field_data_field_is_default d on d.entity_id = n.nid
        WHERE n.status = 1
        AND n.type = 'solution'
        AND d.field_is_default_value IS NOT NULL
        AND d.field_is_default_value != '0'
        ORDER BY n.changed DESC 
        LIMIT 1
    ")->fetchField();

    if(!empty($nid)) {
        return $nid;
    }

    $nids = entity_get_id_by_uuid('node', array('934b332a-a247-41eb-ae2e-09dfe144aed3'));

    return array_shift($nids);
}