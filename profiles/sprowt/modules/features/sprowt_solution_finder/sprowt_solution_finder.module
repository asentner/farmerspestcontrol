<?php
/**
 * @file
 * Code for the Sprowt Solution Finder feature.
 */

include_once 'sprowt_solution_finder.features.inc';


/**
 * Implements hook_menu().
 */
function sprowt_solution_finder_menu()
{
    $items = array();
    $items['solution-finder'] = array(
        'page callback' => '_sprowt_solution_finder_find_solution',
        'access callback' => true,
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Implements hook_theme().
 */
function sprowt_solution_finder_theme($existing, $type, $theme, $path)
{
    return array(
        'sprowt_solution_finder_block' => array(
            'variables' => array(
                'concerns' => array(),
                'shown' => null,
                'form_id' => ''
            ),
            'path' => $path . '/theme',
            'template' =>  'sprowt-solution-finder-block'
        ),
        'sprowt_solution_finder_concern_modals' => array(
            'variables' => array(
                'concerns' => array(),
                'scmId' => null
            ),
            'path' => $path . '/theme',
            'template' =>  'sprowt-solution-concern-modals'
        ),
        'node__solution__full' => array (
            'template' => 'node--solution--full',
            'path' => $path . '/theme',
            'base hook' => 'node',
        ),
        'field__field_hero_image__solution' => array (
            'template' => 'field--field-hero-image--solution',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'field__field_learn_more_link__solution' => array (
            'template' => 'field--field-learn-more-link--solution',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'page__node__solution' => array (
            'template' => 'page--node--solution',
            'path' => $path . '/theme',
            'base hook' => 'page',
        ),
        'field__field_plan_features_header' => array (
            'template' => 'field--field-plan-features-header',
            'path' => $path . '/theme',
            'base hook' => 'field',
        ),
        'paragraphs_item__plan_information' => array (
            'template' => 'paragraphs-item--plan-information',
            'path' => $path . '/theme',
            'base hook' => 'paragraphs_item',
        ),
        'field_solution_concern_icon' => array()
    );
}

/**
 * Implements hook_theme_registry_alter().
 */
function sprowt_solution_finder_theme_registry_alter(&$theme_registry) {
    ksort($theme_registry);
    $something = 'something';
}

/**
 * Implements hook_block_info().
 */
function sprowt_solution_finder_block_info()
{
    return array(
        'solution_finder' => array(
            'info' => t('Solution Finder'),
            'cache' => DRUPAL_NO_CACHE
        ),
    );
}

/**
 * Implements hook_block_configure().
 */
function sprowt_solution_finder_block_configure($delta = '') {
    $form = array();
    switch($delta) {
        case 'solution_finder':
            $optionsButtonText = variable_get('sprowt_solution_finder_options_button_text', 'More Options');
            $submitButtonText = variable_get('sprowt_solution_finder_submit_button_text', 'Get My Solution');
            $form['html_title'] = array(
                '#type' => 'textfield',
                '#text_format' => 'full_html',
                '#maxlength' => 2000,
                '#title' => t('HTML Title'),
                '#description' => t('An alternate version of the block title, accepts HTML by way of the full_html text format.<br><strong>&lt;strong&gt;</strong> tags will be <strong>bold</strong>. <strong>&lt;em&gt;</strong> tags will be <em>italic</em>. <strong>&lt;span&gt;</strong> tags will be <strong>bold</strong>, <em>italic</em>, and <span style="border-bottom: 2px solid;">underlined</span>.'),
                '#default_value' => variable_get('solution_finder_html_title')
            );
            $form['options_button_text'] = [
                '#type' => 'textfield',
                '#title' => 'Expand Button Text',
                '#default_value' => $optionsButtonText
            ];
            $form['submit_button_text'] = [
                '#type' => 'textfield',
                '#title' => 'Submit Button Text',
                '#default_value' => $submitButtonText
            ];
            break;
    }

    return $form;
}

/**
 * Implements hook_block_save().
 */
function sprowt_solution_finder_block_save($delta = '', $edit = []) {
    switch($delta) {
        case 'solution_finder':
            if(!empty($edit['html_title'])) {
                variable_set('solution_finder_html_title', $edit['html_title']);
            }
            else {
                variable_del('solution_finder_html_title');
            }
            if(!empty($edit['options_button_text'])) {
                variable_set('sprowt_solution_finder_options_button_text', $edit['options_button_text']);
            }
            else {
                variable_del('sprowt_solution_finder_options_button_text');
            }
            if(!empty($edit['submit_button_text'])) {
                variable_set('sprowt_solution_finder_submit_button_text', $edit['submit_button_text']);
            }
            else {
                variable_del('sprowt_solution_finder_submit_button_text');
            }
            break;
    }
}

function theme_field_solution_concern_icon($variables) {
    $output = '';

    // Render the label, if it's not hidden.
    if (!$variables['label_hidden']) {
        $output .= '<span class="field__label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</span>';
    }

    // Render the items.
    $output .= '<span class="field__items"' . $variables['content_attributes'] . '>';
    foreach ($variables['items'] as $delta => $item) {
        $classes = 'field__item ' . ($delta % 2 ? 'odd' : 'even');
        $output .= '<span class="' . $classes . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</span>';
    }
    $output .= '</span>';

    // Render the top-level DIV.
    $output = '<span class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</span>';

    return $output;
}

/**
 * Implements hook_block_view().
 */
function sprowt_solution_finder_block_view($delta = '')
{
    $modulePath = drupal_get_path('module', 'sprowt_solution_finder');
    $block = array();
    switch ($delta) {
        case 'solution_finder':
            $concern_nids = db_query("
                SELECT n.nid
                FROM node n
                LEFT JOIN weight_weights w on w.entity_type = 'node' AND w.entity_id = n.nid
                LEFT JOIN field_data_field_include_in_solution_finder i on i.entity_id = n.nid AND i.entity_type = 'node'
                WHERE n.type = 'concern'
                AND n.status = 1
                AND i.field_include_in_solution_finder_value = 1
                ORDER BY w.weight ASC
            ")->fetchCol();
            $concerns = node_load_multiple($concern_nids);

            $arrays = array();
            foreach($concerns as $concern) {
                $iconRender = field_view_field('node', $concern, 'field_icon_file', array(
                    'label' => 'hidden',
                    'type' => 'solution_finder'
                ));
                foreach($iconRender["#items"] as &$item) {
                    $item['solution_finder_concern'] = true;
                }
                $array = array(
                    'nid' => $concern->nid,
                    'name' => $concern->title,
                    'icon' => $iconRender
                );
                $arrays[] = $array;
            }

            if(empty($arrays)) {
                return array();
            }

            $id = drupal_html_id('solution-finder-form');

            $optionsButtonText = variable_get('sprowt_solution_finder_options_button_text', 'More Options');
            $submitButtonText = variable_get('sprowt_solution_finder_submit_button_text', 'Get My Solution');

            $block['content'] = array(
                '#markup' => theme('sprowt_solution_finder_block', array(
                    'concerns' => $arrays,
                    'shown' => 6,
                    'form_id' => $id,
                    'optionsButtonText' => $optionsButtonText,
                    'submitButtonText' => $submitButtonText
                )),
                '#attached' => array(
                    'css' => array(
                        $modulePath . '/css/solution_finder.css'
                    ),
                    'js' => array(
                        $modulePath . '/js/solution-finder.js'
                    ),
                ),
            );

            $html_title = variable_get('solution_finder_html_title');
            if(!empty($html_title)) {
                $block['subject'] = $html_title;
            }

            break;
    }

    return $block;
}

function _sprowt_solution_finder_find_solution() {
    $concerns = $_GET['concerns'];
    $default_nid = _sprowt_solution_finder_find_default_solution_nid();

    if(empty($concerns)) {
        //no concerns selected! Go to default solution.
        drupal_goto('node/' . $default_nid);
    }


    //grab all published solutions to filter.
    $solution_nids = db_query("
        SELECT nid
        FROM node
        WHERE type = 'solution'
        AND status = '1'
        ORDER BY created ASC
    ")->fetchCol();

    $solutions = node_load_multiple($solution_nids);

    //convert to entity_metadata_wrappers
    $foundSolutions = array();
    foreach($solutions as $node) {
        $foundSolutions[] = entity_metadata_wrapper('node', $node);
    }

    $concernsToNids = function($concerns) {
        $nids = array();
        foreach($concerns as $concern) {
            $nids[] = $concern->nid;
        }
        return $nids;
    };

    //find solutions with all of the concerns
    foreach($concerns as $concern) {
        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(!in_array($concern, $nids)) {
                unset($foundSolutions[$key]);
            }
        }
    }

    if(!empty($foundSolutions)) {

        //find most specific solution
        $foundSolutions = array_values($foundSolutions);
        $first = $foundSolutions[0];
        $nids = $concernsToNids($first->field_concerns->value());
        $lowScore = count($nids);
        $prevKey = 0;


        foreach($foundSolutions as $key => $sol) {
            $nids = $concernsToNids($sol->field_concerns->value());

            if(count($nids) <= $lowScore) {
                $lowScore = count($nids);
                if($key != 0) {
                    unset($foundSolutions[$prevKey]);
                }
                $prevKey = $key;
            }
            else {
                unset($foundSolutions[$key]);
            }
        }

        //if multiple ones are still found, just grab the last one (most recently created)
        $solution = array_pop($foundSolutions);
        $solution_nid = $solution->raw()->nid;
    }
    else {
        //none found with all concerns. Use default.
        $solution_nid = $default_nid;
    }

    drupal_goto('node/' . $solution_nid, array(
        'query' => array(
            'concerns' => $concerns
        ),
    ));


}

function _sprowt_solution_finder_find_default_solution_nid() {
    $nid = db_query("
        SELECT n.nid
        FROM node n
        LEFT JOIN field_data_field_is_default d on d.entity_id = n.nid
        WHERE n.status = 1
        AND n.type = 'solution'
        AND d.field_is_default_value IS NOT NULL
        AND d.field_is_default_value != '0'
        ORDER BY n.changed DESC
        LIMIT 1
    ")->fetchField();

    if(!empty($nid)) {
        return $nid;
    }

    $nids = entity_get_id_by_uuid('node', array('934b332a-a247-41eb-ae2e-09dfe144aed3'));

    $contact_nid = array_shift($nids);
    if(!empty($contact_nid)) {
        return $contact_nid;
    }

    $contact_path = drupal_get_normal_path('contact');
    if(!empty($contact_path)) {
        return str_replace('node/', '', $contact_path);
    }

    return '/uuid/934b332a-a247-41eb-ae2e-09dfe144aed3';
}

/**
 * Implements hook_sprowt_shortcode_replace_alter().
 */
function sprowt_solution_finder_sprowt_shortcode_replace_alter(&$shortcodes)
{
    $concern_nids = !empty($_GET['concerns']) ? $_GET['concerns'] : array();
    $solution = menu_get_object();
    if(empty($concern_nids)) {
        if ($solution && $solution->type == 'solution') {
            $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
            $concern_nids = array();
            foreach ($solution_concerns as $array) {
                $concern_nids[] = $array['target_id'];
            }
        }
    }

    $concernNames = array();

    if (!empty($concern_nids)) {
        $concerns = node_load_multiple($concern_nids);

        foreach ($concerns as $node) {
            $concernNames[] = $node->title;
        }
    }
    else {
        $concerns = array();
    }

    $all = false;
    $single = false;

    if($solution && $solution->type == 'solution') {
        $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
        if(count($solution_concerns) == 1) {
            $single = true;
        }

        if(count($solution_concerns) == count($concernNames)) {
            $all = true;
        }
        $shortcodes['[solution-title]'] = $solution->title;
    }

    $text = '';

    if(!empty($concernNames)) {
        if ($single) {
            $text = $concernNames[0];
        }
        elseif ($all) {
            $last = array_pop($concernNames);

            $text = implode(', ', $concernNames);
            $text .= ', and ' . $last;
        }
        elseif (count($concernNames) == 1) {
            $text = implode(', ', $concernNames);
            $text .= ' and More';
        }
        else {
            $text = implode(', ', $concernNames);
            $text .= ', and More';
        }
    }

    if(!empty($text)) {
        $text = "<span class=\"concern-names\">$text</span>";
    }

    $shortcodes['[solution-concern-names]'] = $text;
}

/**
 * Implements hook_sprowt_shortcode_replace().
 */
function sprowt_solution_finder_sprowt_shortcode_replace($string)
{
    if(strpos($string, '[solution-concern-modals]') === false) {
        return $string;
    }

    $concern_nids = !empty($_GET['concerns']) ? $_GET['concerns'] : array();

    if(empty($concern_nids)) {
        $solution = menu_get_object();
        if ($solution && $solution->type == 'solution') {
            $solution_concerns = !empty($solution->field_concerns[LANGUAGE_NONE]) ? $solution->field_concerns[LANGUAGE_NONE] : array();
            $concern_nids = array();
            foreach ($solution_concerns as $array) {
                $concern_nids[] = $array['target_id'];
            }
        }
    }

    if (!empty($concern_nids)) {
        $concerns = node_load_multiple($concern_nids);
    }
    else {
        $concerns = array();
    }


    if(!empty($concerns)) {
        $scmID = drupal_html_id('scm');
        $text = theme('sprowt_solution_finder_concern_modals', array(
            'concerns' => array_values($concerns),
            'scmID' => $scmID
        ));

        $path = drupal_get_path('module', 'sprowt_solution_finder');
        drupal_add_js($path . '/js/solution-concern-modals.js');
        drupal_add_css($path . '/css/solution_finder.css');
    }
    else {
        $text = '';
    }

    return str_replace('[solution-concern-modals]', $text, $string);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sprowt_solution_finder_preprocess_node(&$variables) {
    if($variables['view_mode'] == 'full' && $variables['node']->type == 'solution') {
        drupal_add_css(drupal_get_path('module', 'sprowt_solution_finder') . '/css/solution_finder.css');
        drupal_add_js(drupal_get_path('module', 'sprowt_solution_finder') .'/js/solutions_pages.js');
        $header_classes = [
            'solution--full--header'
        ];

        $first = !empty($variables["field_content"][0]["value"]) ? $variables["field_content"][0]["value"] : null;
        if(!empty($first)) {
            $first = entity_load('paragraphs_item', [$first]);
            $first = entity_metadata_wrapper('paragraphs_item', array_shift($first));
            if($first->getBundle() == 'overlap') {
                $header_classes[] = 'overlap-in-first';
            }

        }

        $variables['header_classes'] = $header_classes;
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sprowt_solution_finder_preprocess_field(&$variables) {
    $element = &$variables['element'];
    $parent = $element['#object'];
    if($element['#field_name'] == 'field_icon_file') {
        if(!empty($element["#items"][0]["solution_finder_concern"])){
            $variables["theme_hook_suggestions"] = array_merge([
                'field_solution_concern_icon'
            ], $variables["theme_hook_suggestions"]);
        }
    }
}

function _sprowt_solution_finder_sample_concerns() {
    $sync = new SprowtNodeSync();
    $rolloutNodeArrays = &drupal_static('sprowt_solution_rollout_nodes');
    if(empty($rolloutNodeArrays)) {
        $rollout = $sync->fetch([], true);
        $rolloutNodeArrays = json_decode($rollout, true);
    }
    $import = [];
    $return = [];
    foreach($rolloutNodeArrays as $nodeArray) {
        if($nodeArray['type'] == 'concern') {
            $uuid = $nodeArray['uuid'];
            $exists = entity_get_id_by_uuid('node', [$uuid]);
            if(!empty($exists)) {
                continue;
            }
            $return[] = $uuid;
            $import[] = $nodeArray;
        }
        else {
            continue;
        }
    }

    if(!empty($import)) {
        $sync->import(json_encode($import));
    }

    return $return;
}

function _sprowt_solution_finder_sample_webforms() {
    $initial = variable_get('sprowt_initial_revert', false);
    $uuids = [
        'd6a5c04b-84bb-4bff-ac0b-0bf90767fd24'
    ];

    foreach($uuids as $key => $uuid) {
        $exists = entity_get_id_by_uuid('node', [$uuid]);
        if(!empty($exists) && empty($initial)) {
            unset($uuids[$key]);
        }
    }

    $uuids = array_values($uuids);

    if(!empty($uuids)) {
        $sync = new SprowtNodeSync();
        $code = $sync->fetch([
            'uuids' => $uuids
        ]);
        $sync->import($code, !empty($initial) ? 'revision': 'new');
    }

    return $uuids;
}

function _sprowt_solution_finder_sample_nodes() {
    _sprowt_solution_finder_sample_concerns();
    _sprowt_solution_finder_sample_webforms();
    $solution_uuids = _sprowt_solution_finder_sample_solutions();
    if(!empty($solution_uuids)) {
        _sprowt_solution_finder_sample_set_testimonial_field($solution_uuids);
    }
}

function _sprowt_solution_finder_find_paragraph($entity, $uuid) {
    if(!empty($entity['uuid']) && $entity['uuid'] === $uuid) {
        return $entity;
    }

    if(is_array($entity)) {
        foreach($entity as $var) {
            $return = _find_paragraph($var, $uuid);
            if(!empty($return)) {
                return $return;
            }
        }
    }

    return false;
}

function _sprowt_solution_finder_test() {
    $uuids = [
        'd6a5c04b-84bb-4bff-ac0b-0bf90767fd24',
        '21891ec0-8c6a-4057-afb2-99af4d3f4e49',
        'ca009b61-d7f5-4f95-8f62-af50531258e4',
        '9507e61e-e034-4cc0-af6d-41d8d19f4a7a'
    ];

    foreach($uuids as $key => $uuid) {
        $exists = entity_get_id_by_uuid('node', [$uuid]);
        if(!empty($exists) && empty($initial)) {
            unset($uuids[$key]);
        }
    }

    $uuids = array_values($uuids);

    if(!empty($uuids)) {
        $sync = new SprowtNodeSync();
        $code = $sync->fetch([
            'uuids' => $uuids
        ]);
        $sync->import($code, !empty($initial) ? 'revision': 'new');
    }

    return $uuids;
}

function _sprowt_solution_finder_sample_solutions() {
    $initial = variable_get('sprowt_initial_revert', false);
    $sync = new SprowtNodeSync();
    $rolloutNodeArrays = &drupal_static('sprowt_solution_rollout_nodes');
    if(empty($rolloutNodeArrays)) {
        $rollout = $sync->fetch([], true);
        $rolloutNodeArrays = json_decode($rollout, true);
    }
    $import = [];
    $return = [];
    foreach($rolloutNodeArrays as $nodeArray) {
        if($nodeArray['type'] == 'solution') {
            $uuid = $nodeArray['uuid'];
            $exists = entity_get_id_by_uuid('node', [$uuid]);
            if(!empty($exists) && empty($initial)) {
                continue;
            }
            $return[] = $uuid;
            $import[] = $nodeArray;
        }
        else {
            continue;
        }
    }

    if(!empty($import)) {
        $sync->import(json_encode($import), !empty($initial) ? 'revision' : 'new');
    }

    return $return;
}

function _sprowt_solution_finder_sample_nodes_legacy() {
    require_once DRUPAL_ROOT . '/includes/utility.inc';
    $path = drupal_get_path('module', 'sprowt_solution_finder');
    $sync = new SprowtNodeSync();
    $concernJson = file_get_contents($path . '/nodes/concerns.json');
    $webformJson = file_get_contents($path . '/nodes/webform.json');

    $importNodes = [];
    $concernsArray = json_decode($concernJson, true);
    $webformsArray = json_decode($webformJson, true);
    $nodeArrays = array_merge($concernsArray, $webformsArray);
    foreach($nodeArrays as $nodeArray) {
        $uuid = $nodeArray['uuid'];
        $exists = entity_get_id_by_uuid('node', [$uuid]);
        if(empty($exists)) {
            $importNodes[] = $nodeArray;
        }
    }

    if(!empty($importNodes)) {
        $sync->import(json_encode($importNodes));
    }

    $uuids = [];
    $uuids[] = _sprowt_solution_finder_sample_solution('solution.export');
    $uuids[] = _sprowt_solution_finder_sample_solution('solution2.export');
    _sprowt_solution_finder_sample_set_testimonial_field($uuids);
}


function _sprowt_solution_finder_sample_solution($solutionFileName) {
    require_once DRUPAL_ROOT . '/includes/utility.inc';
    $path = drupal_get_path('module', 'sprowt_solution_finder');
    $existing = variable_get('node_export_existing', 'new');

    $exportFile = $path . '/nodes/' . $solutionFileName;
    $export = file_get_contents($exportFile);

    $array = [];
    eval('$array = ' . $export . ';');
    foreach($array as $key => &$obj) {
        if(!empty(entity_get_id_by_uuid('node', array($obj->uuid)))) {
            unset($array[$key]);
            continue;
        }
        _sprowt_solution_finder_convert_entity_refrence_fields($obj);
        _sprowt_solution_finder_convert_blockreference_fields($obj);
        //_sprowt_solution_finder_set_testimonial_fields($obj, '', $testimonial_nids);
    }

    if(!empty($array)) {
        $newExport = drupal_var_export($array);
        node_export_import($newExport);

        $obj = array_shift($array);
        $nodes = entity_uuid_load('node', array($obj->uuid));
        $node = array_pop($nodes);
        $node->uid = 1;
        $n = entity_metadata_wrapper('node', $node);
        $concern_nids = db_query("
                SELECT n.nid
                FROM node n
                LEFT JOIN weight_weights w on w.entity_type = 'node' AND w.entity_id = n.nid
                LEFT JOIN field_data_field_include_in_solution_finder i on i.entity_id = n.nid AND i.entity_type = 'node'
                WHERE n.type = 'concern'
                AND n.status = 1
                AND i.field_include_in_solution_finder_value = 1
                ORDER BY w.weight ASC
                LIMIT 3
            ")->fetchCol();
        $n->field_concerns = $concern_nids;

        $n->save();
    }
    variable_set('node_export_existing', $existing);
    return $n->value()->uuid;
}

function _sprowt_solution_finder_sample_set_testimonial_field($uuids) {
    foreach($uuids as $uuid) {
        $ids = entity_get_id_by_uuid('node', [$uuid]);
        if(empty($ids)) {
            return false;
        }

        $id = array_shift($ids);
        $node = node_load($id);

        $testimonial_nids = db_query("
            SELECT nid
            FROM node
            WHERE type = 'testimonial'
            AND status = 1
            LIMIT 3
        ")->fetchCol();

        _sprowt_solution_finder_set_all_field_values('node', $node, 'field_testimonial_ref', $testimonial_nids);
    }

}

function _sprowt_solution_finder_set_all_field_values($entity_type, $entity, $field_name, $value) {
    $e = entity_metadata_wrapper($entity_type, $entity);
    $instance = field_info_instance($entity_type, $field_name, $e->getBundle());
    if(!empty($instance)) {
        $e->{$field_name}->set($value);
        $e->save();
    }

    $paragraph_ids = _sprowt_solution_finder_find_all_paragraph_ids($entity_type, $e->getIdentifier());

    $paragraphs = entity_load('paragraphs_item', $paragraph_ids);
    foreach($paragraphs as $paragraph) {
        $e = entity_metadata_wrapper('paragraphs_item', $paragraph);
        $instance = field_info_instance('paragraphs_item', $field_name, $e->getBundle());
        if(!empty($instance)) {
            $e->{$field_name}->set($value);
            $e->save();
        }
    }

}



function _sprowt_solution_finder_find_all_paragraph_ids($entity_type, $entity_id, &$ids = []) {
    $paragraph_fields = _sprowt_solution_finder_get_paragraph_field_names();

    $FromSql = '';

    foreach($paragraph_fields as $i => $field_name) {
        if(!empty($FromSql)) {
            $FromSql .= "\nUNION\n";
        }

        $alias = "t$i";

        $FromSql .= "
            SELECT entity_type, entity_id as 'parent_id', {$field_name}_value as 'item_id'
            FROM field_data_{$field_name} $alias
        ";
    }

    $firstLevelIds = db_query("
        SELECT item_id
        FROM ($FromSql) fs
        WHERE entity_type = :entity_type
        AND parent_id = :entity_id
    ", [
        ':entity_type' => $entity_type,
        ':entity_id' => $entity_id
    ])->fetchCol();

    if(!empty($firstLevelIds)) {
        $ids = array_merge($ids, $firstLevelIds);
        foreach($firstLevelIds as $p_id) {
            _sprowt_solution_finder_find_all_paragraph_ids('paragraphs_item', $p_id, $ids);
        }
    }

    return $ids;

}

function _sprowt_solution_finder_convert_blockreference_fields(&$var, $field_name = '') {
    return _sprowt_solution_finder_loop_through_export_for_field($var, $field_name, function(&$array, $field_name) {
        $efFields = array(
            'field_block_reference'
        );
        $maps = _sprowt_solution_finder_get_node_maps();
        if (in_array($field_name, $efFields)) {
            foreach ($array as $lang => &$items) {
                foreach ($items as $key => &$item) {
                    if(empty($item['uuid'])) {
                        $modDelta = $item['moddelta'];
                        if (strpos($modDelta, 'webform:client-block-') !== false) {
                            $nid = str_replace('webform:client-block-', '', $modDelta);
                            $uuid = $maps['old'][$nid];
                            if (!empty($maps['new'][$uuid])) {
                                $item['moddelta'] = 'webform:client-block-' . $maps['new'][$uuid];
                                $item['uuid'] = $uuid;
                            }
                            else {
                                unset($items[$key]);
                            }
                        }
                    }
                }
                $items = array_values($items);
            }
        }
    });
}

function _sprowt_solution_finder_get_paragraph_field_names($reset = false) {
    $fields = &drupal_static(__FUNCTION__);
    if(!isset($fields) || $reset) {
        $fields = db_query("
            SELECT field_name
            FROM field_config
            WHERE type = 'paragraphs'
        ")->fetchCol();
    }

    return $fields;
}

function _sprowt_solution_finder_get_field_collection_field_names($reset = false) {
    $fields = &drupal_static(__FUNCTION__);
    if(!isset($fields) || $reset) {
        $fields = db_query("
            SELECT field_name
            FROM field_config
            WHERE type = 'field_collection'
        ")->fetchCol();
    }

    return $fields;
}

function _sprowt_solution_finder_get_entity_refrence_field_names($reset = false) {
    $fields = &drupal_static(__FUNCTION__);
    if(!isset($fields) || $reset) {
        $fields = db_query("
            SELECT field_name
            FROM field_config
            WHERE type = 'entityreference'
        ")->fetchCol();
    }

    return $fields;
}

function _sprowt_solution_finder_get_node_maps($reset = false) {
    $map = &drupal_static(__FUNCTION__);
    if(!isset($map) || $reset) {
        $path = drupal_get_path('module', 'sprowt_solution_finder');
        $file = $path . '/nodes/node_map.json';
        $json = file_get_contents($file);
        $old_map = json_decode($json, true);

        $new_map = db_query("
            SELECT uuid, nid
            FROM node
        ")->fetchAllKeyed();

        $map = array(
            'old' => $old_map,
            'new' => $new_map
        );
    }

    return $map;
}

function _sprowt_solution_finder_export_node_map() {
    $path = drupal_get_path('module', 'sprowt_solution_finder');
    $file = $path . '/nodes/node_map.json';

    $node_map = db_query("
        SELECT nid, uuid
        FROM node
    ")->fetchAllKeyed();
    $json = json_encode($node_map);
    file_put_contents($file, $json);
}

function _sprowt_solution_finder_convert_entity_refrence_fields(&$var, $field_name = '') {
    return _sprowt_solution_finder_loop_through_export_for_field($var, $field_name, function(&$array, $field_name) {
        $efFields = _sprowt_solution_finder_get_entity_refrence_field_names();
        $maps = _sprowt_solution_finder_get_node_maps();
        if(in_array($field_name, $efFields)) {
            foreach($array as $lang => &$items) {
                foreach($items as $key => &$item) {
                    if(empty($item['uuid'])) {
                        $nid = $item['target_id'];
                        if($nid == 99) {
                            $test = true;
                        }
                        $uuid = $maps['old'][$nid];
                        if (!empty($maps['new'][$uuid])) {
                            $item['target_id'] = $maps['new'][$uuid];
                            $item['uuid'] = $uuid;
                        }
                        else {
                            unset($items[$key]);
                        }
                    }
                }
                $items = array_values($items);
            }
        }
    });
}

function _sprowt_solution_finder_loop_through_export_for_field(&$var, $field_name = '', $function){
    if(is_object($var)) {
        $array = json_decode(json_encode($var), true);
        foreach($array as $prop => $value) {
            _sprowt_solution_finder_loop_through_export_for_field($var->{$prop}, $prop, $function);
        }

    }

    $array = &$var;

    if($field_name == 'paragraph_fields' || $field_name == 'fc_fields') {
        if(!empty($array) && is_array($array)) {
            foreach ($array as $field_name => &$fields) {
                if (!empty($fields) && is_array($fields)) {
                    foreach ($fields as $lang => &$items) {
                        _sprowt_solution_finder_loop_through_export_for_field($items, '', $function);
                    }
                }
            }
        }
    }

    if(strpos($field_name, 'field_') === 0) {
        $function($array, $field_name);
    }

    if(is_array($array)) {
        foreach($array as $key => &$value) {
            _sprowt_solution_finder_loop_through_export_for_field($value, $key, $function);
        }
    }

    return $array;
}

/**
 * Implements hook_features_post_restore().
 */
function sprowt_solution_finder_features_post_restore($op, $items)
{
    if($op == 'enable' && in_array('sprowt_solution_finder', array_keys($items))) {
        variable_set('sprowt_solution_finder_being_enabled', true);
    }
    if($op == 'rebuild' && in_array('sprowt_solution_finder', array_keys($items))) {
        if(variable_get('sprowt_solution_finder_being_enabled', false)) {
            _sprowt_solution_finder_sample_nodes();
            $nidArray =  db_query("
                SELECT nid, title
                FROM node
                WHERE type = 'solution'
                AND status = 1
            ")->fetchAll(PDO::FETCH_ASSOC);

            foreach($nidArray as $array) {
                $link = l($array['title'], 'node/' . $array['nid']);

                drupal_set_message("Example Solution with example concerns added. Solution: " . $link . '!');
            }
            variable_del('sprowt_solution_finder_being_enabled');
        }
    }
}

function sprowt_solution_finder_preprocess_block(&$variables) {
    if($variables["block"]->module == 'webform') {
        $node = $variables["elements"]["#node"];
        if($node->uuid == 'd6a5c04b-84bb-4bff-ac0b-0bf90767fd24') { //solution webform
            $variables["block"]->subject = '<none>';
        }
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sprowt_solution_finder_preprocess_html(&$variables) {
    if(!path_is_admin(current_path())) {
        $containsSolutionFinder = _sprowt_solution_finder_page_contains_solution_finder($variables['page']);
        if (!empty($containsSolutionFinder)) {
            $variables['attributes_array']['class'][] = 'has-solution-finder';
        }
    }
}

function _sprowt_solution_finder_page_contains_solution_finder($variables, $maxDepth = 3, $depth = 0) {
    if(is_array($variables)
        && !empty($variables['#block'])
        && is_object($variables['#block'])
        && ($variables['#block']->bid == 'sprowt_solution_finder-solution_finder'
            || ($variables['#block']->module == 'sprowt_solution_finder'
                && $variables['#block']->delta == 'solution_finder'))
    ) {
        return true;
    }
    if(is_array($variables) && $depth <= $maxDepth) {
        $newDepth = $depth + 1;
        foreach ($variables as $variable) {
            $return = false;
            if (is_array($variable)) {
                $return = _sprowt_solution_finder_page_contains_solution_finder($variable, $maxDepth, $newDepth);
            }

            if (!empty($return)) {
                return $return;
            }
        }
    }

    return false;
}
