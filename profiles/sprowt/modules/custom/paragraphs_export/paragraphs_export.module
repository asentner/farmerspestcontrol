<?php
/**
 * modified copy of paragraphs_clone_node_alter()
 */
function paragraphs_export_clone_node_alter(&$node, $context) {
    foreach (field_info_fields() as $field_name => $field) {
        if ($field['type'] == 'paragraphs' && isset($node->$field_name)) {
            $language = $node->language;
            //reset field to original to cancel out the broken paragraphs_clone_node_alter() function
            $node->$field_name = $context['original_node']->$field_name;
            foreach ($node->$field_name as $key => $values) {
                paragraphs_export_clone_items('node', $node, $field_name, $language);
            }
        }
    }
}

/**
 * Modified copy of paragraphs_clone_items. Meant to fix the original function.
 */
function paragraphs_export_clone_items($entity_type, &$entity, $field_name, $language = LANGUAGE_NONE) {
    $old_items = $entity->{$field_name}[$language];
    if (!is_array($old_items)) {
        $old_items = array($old_items);
    }

    unset($entity->{$field_name}[$language]);

    foreach ($old_items as $old_item_array) {
        $old_item = entity_load('paragraphs_item', array($old_item_array['value']));
        $old_item = array_pop($old_item);
        if (!isset($old_item->bundle)) {
            continue;
        }

        list( , , $bundle) = entity_extract_ids('paragraphs_item', $old_item);

        /* @var $new_item ParagraphsItemEntity */
        $new_item = entity_create('paragraphs_item', array('bundle' => $bundle, 'field_name' => $field_name));
        $new_item->setHostEntity($entity_type, $entity, $language);

        // Check if any of the fields in the newly cloned fc item is a paragraph.
        foreach (field_info_instances('paragraphs_item', $bundle) as $new_field_name => $new_field_instance) {
            if (!empty($old_item->{$new_field_name})) {
                $new_item->{$new_field_name} = $old_item->{$new_field_name};
                $field_info = field_info_field($new_field_name);
                if ($field_info['type'] == 'paragraphs') {
                    paragraphs_export_clone_items('paragraphs_item', $new_item, $new_field_name, $language);
                }
                if(function_exists('field_collection_export_clone_items')) {
                    if ($field_info['type'] == 'field_collection') {
                        field_collection_export_clone_items('field_collection_item', $new_item, $new_field_name, $language);
                    }
                }
            }
        }
    }
}

function _paragraphs_export_node_clone_prepopulate_entity_after_extractions(&$entity, $extracted, $entity_type) {
    $paragraph_fields = $extracted->paragraph_fields;
    foreach($paragraph_fields as $field_name => &$langs) {
        foreach($langs as $lang => &$items) {
            foreach($items as &$item) {
                $item->uuid = null;
                $item->vuuid = null;
                $item->item_id = null;
                $item->new_item = 1;
                $item->setHostEntity($entity_type, $entity, $lang);
                if(!empty($item->paragraph_fields)) {
                    $clone = clone $item;
                    _paragraphs_export_node_clone_prepopulate_entity_after_extractions($item, $clone, 'paragraphs_item');
                }
            }
            $langs[$lang] = array_values($items);
        }
        $entity->{$field_name} = $paragraph_fields[$field_name];
    }
    if(!empty($entity->paragraph_fields)) {
        unset($entity->paragraph_fields);
    }
}

/**
 * Implements hook_node_export_node_alter().
 */
function paragraphs_export_node_export_node_alter(&$node, $original_node) {
    paragraphs_export_extract_paragraphs($node, $original_node, 'node');
    paragraphs_export_relationships_extract($node, $original_node, 'node');
}


/**
 * Implements hook_node_export_node_import_alter().
 */
function paragraphs_export_node_export_node_import_alter(&$node, $original_node, $save) {
    paragraphs_export_import_paragraphs($node, $original_node);
}

function _paragraphs_export_extract_block_reference_info($module, $delta) {
    $info = [];
    switch($module) {
        //I only need to handle webforms for right now
        case 'webform':
            $nid = str_replace('client-block-', '', $delta);
            $info['webform'] = [
                'nid' => $nid
            ];
            $uuid = entity_get_uuid_by_id('node', [$nid]);
            $info['webform']['uuid'] = array_shift($uuid);
            break;
    }

    return $info;
}

function _paragraphs_export_handle_block_reference_info($info, $module, $delta) {
    $value = null;
    switch($module) {
        //I only need to handle webforms for right now
        case 'webform':
            $uuid = $info['webform']['uuid'];
            $nid = entity_get_id_by_uuid('node', [$uuid]);
            if(!empty($nid)) {
                $nid = array_shift($nid);
                $newDelta = 'client-block-' . $nid;
                $value = [
                    'moddelta' => $module . ':' . $newDelta
                ];
            }
            break;
    }
    return $value;
}

function paragraphs_export_relationships_extract(&$element, $original, $element_type = 'node') {
    if($element_type == 'node' || $element_type == 'bean') {
        $bundle = $original->type;
    }
    else {
        $bundle = $original->bundle;
    }
    $instances = field_info_instances($element_type, $bundle);
    $wrapper = entity_metadata_wrapper($element_type, $element);

    $references = [];
    foreach($instances as $instance) {
        $info = field_info_field($instance["field_name"]);
        switch($info['type']) {
            case 'paragraphs':
                if(!empty($element->paragraph_fields)) {
                    $value = [];
                    foreach($element->paragraph_fields as $paragraph_field_name => &$paragraph_field) {
                        foreach($paragraph_field as $lang => &$items) {
                            foreach($items as &$item) {
                                $original_item = $item;
                                paragraphs_export_relationships_extract($item, $original_item, 'paragraphs_item');
                            }
                        }
                    }
                }
                break;
            case 'field_collection':
                if(!empty($element->fc_fields)) {
                    $value = [];
                    foreach($element->fc_fields as $fc_field_name => &$fc_field) {
                        foreach($fc_field as $lang => &$items) {
                            foreach($items as &$item) {
                                $original_item = $item;
                                paragraphs_export_relationships_extract($item, $original_item, 'field_collection_item');
                            }
                        }
                    }
                }
                break;
            case 'blockreference':
                $references[$instance["field_name"]] = [
                    'field_type' => 'blockreference',
                    'value' => null
                ];
                $value = $wrapper->{$instance["field_name"]}->value();
                $bids = [];
                $theme = variable_get('theme_default', null);
                if(!empty($value) && !empty($value['moddelta'])) {
                    $parts = explode(':', $value['moddelta']);
                    $module = $parts[0];
                    $delta = $parts[1];
                    if(!empty($theme)) {
                        $bid = db_query("
                            SELECT bid
                            FROM block
                            WHERE module = :module
                            AND delta = :delta
                            AND theme = :theme
                        ", [
                            'module' => $module,
                            'delta' => $delta,
                            'theme' => $theme
                        ])->fetchField();
                        if(!empty($bid)) {
                            $bids[] = $bid;
                        }
                    }
                    $references[$instance["field_name"]]['value'] = [
                        'module' => $module,
                        'delta' => $delta,
                        'info' => _paragraphs_export_extract_block_reference_info($module, $delta)
                    ];
                }
                elseif (!empty($value)) {
                    $references[$instance["field_name"]]['value'] = [];
                    foreach($value as $v) {
                        $parts = explode(':', $v['moddelta']);
                        $module = $parts[0];
                        $delta = $parts[1];
                        if(!empty($theme)) {
                            $bid = db_query("
                            SELECT bid
                            FROM block
                            WHERE module = :module
                            AND delta = :delta
                            AND theme = :theme
                        ", [
                                'module' => $module,
                                'delta' => $delta,
                                'theme' => $theme
                            ])->fetchField();
                            if(!empty($bid)) {
                                $bids[] = $bid;
                            }
                        }
                        $references[$instance["field_name"]]['value'][] = [
                            'module' => $module,
                            'delta' => $delta,
                            'info' => _paragraphs_export_extract_block_reference_info($module, $delta)
                        ];
                    }
                }

                if(!empty($bids) && !empty($theme)) {
                    sprowt_require_class('blockbuilder');
                    $bb = new BlockBuilder($bids);
                    $references[$instance["field_name"]]['export'] = $bb->export($theme);
                }
                $element->{$instance["field_name"]} = null;
                break;
            case 'entityreference':
                $references[$instance["field_name"]] = [
                    'field_type' => 'entityreference',
                    'target_type' => $info["settings"]["target_type"],
                    'value' => null
                ];

                $value = $wrapper->{$instance["field_name"]}->value();
                if(!empty($value) && !is_array($value)) {
                    $vMeta = entity_metadata_wrapper($info["settings"]["target_type"], $value);
                    $uuids = entity_get_uuid_by_id($info["settings"]["target_type"], [$vMeta->getIdentifier()]);
                    $uuid = array_shift($uuids);
                    $references[$instance["field_name"]]['value'] = [
                        'entity_type' => $info["settings"]["target_type"],
                        'target_uuid' => $uuid
                    ];
                }
                elseif (!empty($value)) {
                    $references[$instance["field_name"]]['value'] = [];
                    foreach($value as $v) {
                        $vMeta = entity_metadata_wrapper($info["settings"]["target_type"], $v);
                        $uuids = entity_get_uuid_by_id($info["settings"]["target_type"], [$vMeta->getIdentifier()]);
                        $uuid = array_shift($uuids);
                        $references[$instance["field_name"]]['value'][] = [
                            'entity_type' => $info["settings"]["target_type"],
                            'target_uuid' => $uuid
                        ];
                    }
                }
                $element->{$instance["field_name"]} = null;
                break;
            case 'taxonomy_term_reference':
                $value = $wrapper->{$instance["field_name"]}->value();
                $references[$instance["field_name"]] = [
                    'field_type' => 'taxonomy_term_reference',
                    'value' => null
                ];
                if(!empty($value) && !is_array($value)) {
                    $references[$instance["field_name"]]['value'] = [
                        'entity_type' => 'taxonomy_term',
                        'target_uuid' => $value->uuid
                    ];
                }
                elseif (!empty($value)) {
                    $references[$instance["field_name"]]['value'] = [];
                    foreach($value as $v) {
                        $references[$instance["field_name"]]['value'][] = [
                            'entity_type' => 'taxonomy_term',
                            'target_uuid' => $v->uuid
                        ];
                    }
                }
                $element->{$instance["field_name"]} = null;
                break;
        }
    }

    if(!empty($references)) {
        $element->extracted_references = $references;
    }
}

/**
 * Implements hook_node_export_after_import_alter().
 */
function paragraphs_export_node_export_after_import_alter(&$nodes, $format, $save) {
    foreach($nodes as $nid => $node) {
        paragraphs_export_import_references($node, 'node', $nid);
    }
}

function paragraphs_export_import_references($entity, $entity_type, $entity_id) {
    if(!empty($entity->paragraph_fields)) {
        foreach($entity->paragraph_fields as $paragraph_field_name => &$paragraph_field) {
            foreach($paragraph_field as $lang => $items) {
                foreach($items as $delta => $item) {
                    $pid = entity_get_id_by_uuid('paragraphs_item', [$item->uuid]);
                    $pid = array_shift($pid);
                    paragraphs_export_import_references($item, 'paragraphs_item', $pid);
                }
            }
        }
    }
    if(!empty($entity->fc_fields)) {
        foreach($entity->fc_fields as $fc_field_name => &$fc_field) {
            foreach($fc_field as $lang => $items) {
                foreach($items as $item) {
                    $fid = entity_get_id_by_uuid('field_collection_item', [$item->uuid]);
                    $fid = array_shift($fid);
                    paragraphs_export_import_references($item, 'field_collection_item', $fid);
                }
            }
        }
    }
    if(!empty($entity->extracted_references)) {
        $loaded = entity_load($entity_type, [$entity_id]);
        $loaded = array_shift($loaded);
        $wrapper = entity_metadata_wrapper($entity_type, $loaded);
        $save = false;
        foreach ($entity->extracted_references as $field_name => $reference) {
            $value = null;
            switch($reference['field_type']) {
                case 'blockreference':
                    if(!empty($reference['export'])) {
                        $theme = variable_get('theme_default', null);
                        if(!empty($theme)) {
                            sprowt_require_class('blockbuilder');
                            $bb = new BlockBuilder();
                            $bb->import($reference['export'], $theme);
                        }
                    }
                    if(!empty($reference['value']) && !empty($reference['value']['module'])) {
                        $value = _paragraphs_export_handle_block_reference_info($reference['value']['info'], $reference['value']['module'], $reference['value']['delta']);
                    }
                    elseif (!empty($reference['value'])) {
                        $value = [];
                        foreach($reference['value'] as $info) {
                            $value[] = _paragraphs_export_handle_block_reference_info($info['info'], $info['module'], $info['delta']);
                        }
                    }
                    if(!empty($value)) {
                        $wrapper->{$field_name} = $value;
                        $save = true;
                    }
                    break;
                case 'taxonomy_term_reference':
                    if(($reference['value']['target_uuid'])) {
                        $referencedEntity = entity_uuid_load($reference['value']['entity_type'], [$reference['value']['target_uuid']]);
                        if(!empty($referencedEntity)) {
                            $referencedEntity = array_shift($referencedEntity);
                            $referencedWrapper = entity_metadata_wrapper($reference['value']['entity_type'], $referencedEntity);
                            $value = [
                                'tid' => $referencedWrapper->getIdentifier()
                            ];
                        }
                    }
                    elseif (!empty($reference['value'])) {
                        $value = [];
                        foreach($reference['value'] as $referenceInfo) {
                            $referencedEntity = entity_uuid_load($referenceInfo['entity_type'], [$referenceInfo['target_uuid']]);
                            if(!empty($referencedEntity)) {
                                $referencedEntity = array_shift($referencedEntity);
                                $referencedWrapper = entity_metadata_wrapper($referenceInfo['entity_type'], $referencedEntity);
                                $value[] = [
                                    'tid' => $referencedWrapper->getIdentifier()
                                ];
                            }
                        }
                    }
                    if(!empty($value)) {
                        $wrapper->{$field_name}->set($value);
                        $save = true;
                    }
                    break;
                case 'entityreference':
                    if(($reference['value']['target_uuid'])) {
                        $referencedEntity = entity_uuid_load($reference['value']['entity_type'], [$reference['value']['target_uuid']]);
                        if(!empty($referencedEntity)) {
                            $referencedEntity = array_shift($referencedEntity);
                            $referencedWrapper = entity_metadata_wrapper($reference['value']['entity_type'], $referencedEntity);
                            $value = [
                                'target_id' => $referencedWrapper->getIdentifier()
                            ];
                        }
                    }
                    elseif (!empty($reference['value'])) {
                        $value = [];
                        foreach($reference['value'] as $referenceInfo) {
                            $referencedEntity = entity_uuid_load($referenceInfo['entity_type'], [$referenceInfo['target_uuid']]);
                            if(!empty($referencedEntity)) {
                                $referencedEntity = array_shift($referencedEntity);
                                $referencedWrapper = entity_metadata_wrapper($referenceInfo['entity_type'], $referencedEntity);
                                $value[] = [
                                    'target_id' => $referencedWrapper->getIdentifier()
                                ];
                            }
                        }
                    }
                    if(!empty($value)) {
                        $wrapper->{$field_name}->set($value);
                        $save = true;
                    }
                    break;
            }
        }
        if(!empty($save)) {
            $wrapper->save();
        }
    }
}

function _paragraphs_export_normalize_array_keys(&$array) {
    foreach($array as $key => $value) {
        unset($array[$key]);
        $newKey = ltrim(ltrim(ltrim($key), '*'));
        $array[$newKey] = is_array($value) ? _paragraphs_export_normalize_array_keys($value) : $value;
    }

    return $array;
}

/**
 * This function fixes the fact that node_export doesn't import entities as entities but as stdClasses
 *
 * @param stdClass $stdClass
 * @return stdClass
 */
function _paragraphs_export_stdClass_to_entity($stdClass) {
    if(!is_object($stdClass)) {
        return $stdClass;
    }

    $array = (array) $stdClass;
    _paragraphs_export_normalize_array_keys($array);

    if(empty($array["entityInfo"])) { //not an entity originally
        return $stdClass;
    }

    if($stdClass instanceof $array["entityInfo"]["entity class"]) {// already a full entity
        return $stdClass;
    }

    $entity = entity_create($array["entityType"], $array);

    if($entity === false) { //entity_create failed
        return $stdClass;
    }

    return $entity;
}

function paragraphs_export_import_paragraphs(&$element, $original) {
    if(!empty($original->paragraph_fields)) {
        $paragraph_fields = $original->paragraph_fields;

        foreach ($paragraph_fields as $field_name => $array) {
            foreach($array as $lang => $items) {
                $element->{$field_name}[$lang] = array();
                foreach($items as $paragraphs_item) {
                    $paragraphs_item = _paragraphs_export_stdClass_to_entity($paragraphs_item);
                    $original_item = clone $paragraphs_item;
                    paragraphs_export_file_field_import($paragraphs_item, $original_item, 'paragraphs_item');
                    if(function_exists('field_collection_export_import_field_collection')) {
                        field_collection_export_import_field_collection($paragraphs_item, $original_item, 'paragraphs_item');
                    }
                    paragraphs_export_import_paragraphs($paragraphs_item, $original_item);
                    $existing = variable_get('node_export_existing', 'new');
                    $paragraphs_item->item_id = null;
                    $paragraphs_item->revision_id = null;
                    switch ($existing) {
                        case 'new':
                            $paragraphs_item->is_new = TRUE;
                            unset($paragraphs_item->uuid);
                            $paragraphs_item->save(true);
                            break;
                        case 'revision':
                            _paragraphs_export_entity_uuid_save('paragraphs_item', $paragraphs_item);
                            break;
                        case 'skip':
                            break;
                    }


                    if(!empty($paragraphs_item->item_id)) {
                        $element->{$field_name}[$lang][] = array(
                            'value' => $paragraphs_item->item_id,
                            'revision_id' => $paragraphs_item->revision_id
                        );
                    }
                }
            }
        }
    }
}

function paragraphs_export_extract_paragraphs(&$element, $original, $element_type) {
    if($element_type == 'node' || $element_type == 'bean') {
        $bundle = $original->type;
    }
    else {
        $bundle = $original->bundle;
    }
    $instances = field_info_instances($element_type, $bundle);
    $paragraph_fields = array();
    foreach($instances as $field_name => $instance) {
        if($instance['widget']['module'] == 'paragraphs') {
            $paragraph_fields[$field_name] = $instance;
        }
    }
    if(!empty($paragraph_fields)) {
        $element->paragraph_fields = array();
        foreach ($paragraph_fields as $field_name => $instance) {
            $element->paragraph_fields[$field_name] = array();

            foreach ($element->{$field_name} as $lang => &$items) {
                $paragraph_ids = array();
                foreach($items as $key => &$item) {
                    $paragraph_ids[] = $item['value'];
                    unset($items[$key]);
                }
                $element->paragraph_fields[$field_name][$lang] = entity_load('paragraphs_item', $paragraph_ids);
                foreach($element->paragraph_fields[$field_name][$lang] as &$entity) {
                    $original_entity = $entity;
                    paragraphs_export_file_field_export($entity, $original_entity, 'paragraphs_item');
                    if(function_exists('field_collection_export_extract_field_collection')) {
                        field_collection_export_extract_field_collection($entity, $original_entity, 'paragraphs_item');
                    }
                    paragraphs_export_extract_paragraphs($entity, $original_entity, 'paragraphs_item');
                }
            }
        }
    }
}

/**
 * Handle exporting file fields.
 * Copy of node_export_file_field_export adapted for paragraphs_items
 */
function paragraphs_export_file_field_export(&$entity, $original_entity, $type) {
    if($type == 'node' || $type == 'field_collection') {
        node_export_file_field_export($entity, $original_entity);
        return true;
    }

    $entity_info = array(
        'type' => $type,
        'bundle' => $entity->bundle
    );

    $types = array_filter(variable_get('node_export_file_types', array()));
    if ($entity_info['type'] != 'node' || in_array($entity->type, $types)) {
        $assets_path = variable_get('node_export_file_assets_path', '');
        $export_mode = variable_get('node_export_file_mode', 'inline');

        switch ($export_mode) {
            case 'local':
                $export_var = 'node_export_file_path';
                break;
            case 'remote':
                $export_var = 'node_export_file_url';
                break;
            default:
            case 'inline':
                $export_var = 'node_export_file_data';
                break;
        }

        // If files are supposed to be copied to the assets path.
        if ($export_mode == 'local' && $assets_path) {
            // Ensure the assets path is created
            if (!is_dir($assets_path) && mkdir($assets_path, 0777, TRUE) == FALSE) {
                drupal_set_message(t("Could not create assets path! '!path'", array('!path' => $assets_path)), 'error');
                // Don't continue if the assets path is not ready
                return;
            }

            // Ensure it is writable
            if (!is_writable($assets_path)) {
                drupal_set_message(t("Assets path is not writable! '!path'", array('!path' => $assets_path)), 'error');
                // Don't continue if the assets path is not ready
                return;
            }
        }

        // get all fields from this node type
        $fields = field_info_instances($entity_info['type'],
            $entity_info['bundle']);
        foreach($fields as $field_instance) {
            // load field infos to check the type
            $field = &$entity->{$field_instance['field_name']};
            $info = field_info_field($field_instance['field_name']);

            $supported_fields = array_map('trim', explode(',', variable_get('node_export_file_supported_fields', 'file, image')));

            // check if this field should implement file import/export system
            if (in_array($info['type'], $supported_fields)) {

                // we need to loop into each language because i18n translation can build
                // fields with different language than the node one.
                foreach($field as $language => $files) {
                    if (is_array($files)) {
                        foreach($files as $i => $file) {

                            // convert file to array to stay into the default node_export_file format
                            $file = (object) $file;

                            // media field type doesn't load file the whole file on node_load
                            // it loads only fid, title and data associated with file, so in this case we need
                            // to load it by ourselves.
                            if (empty($file->uri) && !empty($file->fid) && $file = file_load($file->fid)) {
                                $field[$language][$i] = (array) $file;
                            }

                            // Check the file
                            if (!isset($file->uri) || !is_file($file->uri)) {
                                drupal_set_message(t("File field found on node, but file doesn't exist on disk? '!path'", array('!path' => $file->uri)), 'error');
                                continue;
                            }

                            if ($export_mode == 'local') {
                                if ($assets_path) {
                                    $export_data = $assets_path . '/' . basename($file->uri);
                                    if (!copy($file->uri, $export_data)) {
                                        drupal_set_message(t("Export file error, could not copy '%filepath' to '%exportpath'.", array('%filepath' => $file->uri, '%exportpath' => $export_data)), 'error');
                                        return FALSE;
                                    }
                                }
                                else {
                                    $export_data = $file->uri;
                                }
                            }
                            // Remote export mode
                            elseif ($export_mode == 'remote') {
                                // NOTE: This is patched with info from https://drupal.org/node/2046431
                                $export_data = file_create_url($file->uri);
                            }
                            // Default is 'inline' export mode
                            else {
                                $export_data = base64_encode(file_get_contents($file->uri));
                            }

                            // build the field again, and remove fid to be sure that imported node
                            // will rebuild the file again, or keep an existing one with a different fid
                            $field[$language][$i]['fid'] = NULL;
                            $field[$language][$i][$export_var] = $export_data;

                        }
                    }
                }
            }
        }
    }
}

/**
 * Handle importing file fields.
 *
 * @param $entity
 *   Node or field_collection_item object.
 * @param $original_entity
 *   Unused...
 */
function paragraphs_export_file_field_import(&$entity, $original_entity, $type) {
    if($type == 'node' || $type == 'field_collection') {
        node_export_file_field_import($entity, $original_entity);
        return true;
    }

    $entity_info = array(
        'type' => $type,
        'bundle' => $entity->bundle
    );

    // Get all fields from this node type.
    $fields = field_info_instances($entity_info['type'], $entity_info['bundle']);
    foreach($fields as $field_instance) {
        // Load field info to check the type.
        $field = &$entity->{$field_instance['field_name']};
        $info = field_info_field($field_instance['field_name']);

        $supported_fields = array_map('trim', explode(',', variable_get('node_export_file_supported_fields', 'file, image')));

        // Check if this field should implement file import/export system.
        if (in_array($info['type'], $supported_fields)) {

            // We need to loop into each language because i18n translation can build
            // fields with different language than the node one.
            foreach($field as $language => $files) {
                if (is_array($files)) {
                    foreach($files as $i => $field_value) {

                        $file = (object) $field_value;

                        $result = _node_export_file_field_import_file($file);

                        // The file was saved successfully, update the file field (by reference).
                        if ($result == TRUE && isset($file->fid)) {
                            // Retain any special properties from the original field value.
                            $field[$language][$i] = array_merge($field_value, (array) $file);
                        }
                    }
                }
            }
        }
    }
}

/**
 * copy of entity_uuid_save
 */
function _paragraphs_export_entity_uuid_save($entity_type, $entity) {
    // This function, and this function only, depends on the entity module.
    if (!module_exists('entity')) {
        throw new UuidEntityException(t('Calling %function requires the Entity API module (!link).', array('%function' => __FUNCTION__, '!link' => 'http://drupal.org/project/entity')));
    }

    $info = entity_get_info($entity_type);
    $uuid_key = $info['entity keys']['uuid'];
    if (empty($entity->{$uuid_key}) || !uuid_is_valid($entity->{$uuid_key})) {
        watchdog('Entity UUID', 'Attempted to save an entity with an invalid UUID', array(), WATCHDOG_ERROR);
        return FALSE;
    }

    // Falling back on the variable node_options_[type] is not something an API
    // function should take care of. With normal (non UUID) nodes this is dealt
    // with in the form submit handler, i.e. not in node_save().
    // But since using entity_uuid_save() usually means you're trying to manage
    // entities remotely we do respect this variable here to make it work as the
    // node form, but only if we explicitly haven't set $node->revision already.
    if ($entity_type == 'node' && !isset($entity->revision) && in_array('revision', variable_get('node_options_' . $entity->type, array()))) {
        $entity->revision = 1;
    }

    entity_make_entity_local($entity_type, $entity);

    // Save the entity.
    $result = $entity->save(true);

    $hook = 'entity_uuid_save';
    foreach (module_implements($hook) as $module) {
        $function = $module . '_' . $hook;
        if (function_exists($function)) {
            $function($entity, $entity_type);
        }
    }
    return $result;
}
