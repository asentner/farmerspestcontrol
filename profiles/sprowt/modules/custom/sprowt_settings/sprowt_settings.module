<?php

require_once __DIR__ . '/SprowtNodeSync.php';

/**
 * Implements hook_boot().
 */
function sprowt_settings_boot() {
    $GLOBALS['conf']['maintenance_theme'] = 'adminimal';
    $adminimal_settings = variable_get('theme_adminimal_settings', array());
    $adminimal_settings['logo_path'] = 'profiles/sprowt/images/sprowt-logo.png';
    $adminimal_settings['default_logo'] = false;
    //variable_set('theme_adminimal_settings', $adminimal_settings);
    $GLOBALS['conf']['theme_adminimal_settings'] = $adminimal_settings;
    if(defined('MAINTENANCE_MODE')) {
        if(function_exists('drupal_add_css')) {
            drupal_add_css('profiles/sprowt/css/maintenence.css');
        }
    }
}

/**
 * Implements hook_menu().
 */
function sprowt_settings_menu()
{
    $items = array();

    $items['<phone_number>'] = array(
        'page callback' => 'drupal_not_found',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['<phone_number_sms>'] = array(
        'page callback' => 'drupal_not_found',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['<sprowt_customer_login>'] = array(
        'page callback' => 'drupal_not_found',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['node/uuid/%'] = array(
        'page callback' => '_sprowt_settings_node_uuid_redirect',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['node/uuid/%/%'] = array(
        'page callback' => '_sprowt_settings_node_uuid_redirect',
        'page arguments' => array(2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );


    $items['admin/config/sprowt'] = array(
        'title' => 'Sprowt',
        'description' => 'Sprowt',
        'page callback' => '_sprowt_admin_menu_block',
        'access arguments' => array('administer site configuration'),
        'file' => 'sprowt_settings.pages.inc',
        'position' => 'left',
    );

    $items['admin/config/sprowt/sprowt-install-file'] = array(
        'title' => 'Get Sprowt Install File',
        'description' => 'Download install file.',
        'page callback' => 'sprowt_install_file',
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'sprowt_settings.pages.inc',
        'weight' => -50
    );

    $items['admin/config/sprowt/sprowt-settings'] = array(
        'title' => 'Sprowt Settings',
        'description' => 'Company specific settings for the Sprowt platform. Including address, company name, and social media accounts.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sprowt_settings_admin'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'sprowt_settings.pages.inc',
        'weight' => -50
    );
    //
    //    $items['admin/people/add-coalmarch-user'] = array(
    //        'title' => 'Add Coalmarch User',
    //        'description' => 'Add a default Coalmarch User',
    //        'page callback' => 'drupal_get_form',
    //        'page arguments' => array('sprowt_settings_add_coalmarch_user'),
    //        'access arguments' => array('administer users'),
    //        'type' => MENU_NORMAL_ITEM,
    //        'file' => 'sprowt_settings.pages.inc'
    //    );


    $items['sprowt/request-nodes'] = array(
        'page callback' => '_sprowt_settings_request_nodes',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['sprowt/request-nodes/rollout'] = array(
        'page callback' => '_sprowt_settings_request_nodes_rollout',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['sprowt/request-nodes/menu'] = array(
        'page callback' => '_sprowt_settings_request_nodes_menu',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/sprowt/sprowt-rollout-settings'] = array(
        'title' => 'Sprowt Rollout Settings',
        'description' => 'Select which nodes will be requested on rollout.',
        'page callback' => '_sprowt_settings_rollout',
        'access callback' => '_sprowt_settings_rollout_access',
        'type' => MENU_NORMAL_ITEM,
        'weight' => -50
    );

    $items['admin/config/sprowt/unlock-hardcoded'] = [
        'title' => 'Change Hardcoded Path Alias',
        'description' => 'Change a hardcoded path alias',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['_sprowt_settings_unlock_alias_form'],
        'access arguments' => array('access administration pages'),
    ];

    return $items;
}

function sprowt_settings_form_alter(&$form, &$form_state, $form_id) {
    if(!empty($form['#node_edit_form'])) {
        $paths = variable_get('sprowt_settings_paths', array());
        if(!empty($form['#node'])) {
            $uuid = $form['#node']->uuid;

            if(in_array($uuid, array_keys($paths))) {
                $form['path']['pathauto']['#value'] = false;
                $form['path']['pathauto']['#disabled'] = true;
                $form['path']['alias']['#disabled'] = true;
                $form['path']['alias']['#value'] = $paths[$uuid];
                unset($form['path']['alias']['#states']);
            }

            $form['uuid_link'] = array(
                '#type' => 'textfield',
                '#title' => 'Universal Sprowt Alias',
                '#description' => 'Alias which will work across all sprowt sites. Useful for backend link settings built into sprowt.',
                '#value' => "node/uuid/$uuid",
                '#attributes' => array(
                    'readonly' => 'readonly'
                ),
                '#weight' => -1
            );
        }

        _sprowt_settings_node_sync_alter($form, $form_state);
    }

    if($form_id == 'mailgun_admin_settings') {
        //resort domains for easier access
        $opts = $form['mailgun_domain']['#options'];
        $optKeys = array_keys($opts);
        $firstKey = $optKeys[0];
        $firstValue = array_shift($opts);
        ksort($opts);
        $opts = array_merge([$firstKey => $firstValue], $opts);
        $form['mailgun_domain']['#options'] = $opts;
    }
}

/**
 * Implements hook_init().
 */
function sprowt_settings_init()
{
    drupal_add_js(array(
        'sprowt' => array(
            'ctmAccountId' => variable_get('sprowt_ctm_account_id'),
        )
    ), 'setting');
}

/**
 * Implements hook_theme().
 */
function sprowt_settings_theme()
{
    return array(
        'sprowt_settings_address' => array(
            'variables' => array(),
            'template' => 'sprowt_settings_address',
            'path' => drupal_get_path('module', 'sprowt_settings') . '/theme',
        ),
        'sprowt_settings_social_media' => array(
            'variables' => array(),
            'template' => 'sprowt_settings_social_media',
            'path' => drupal_get_path('module', 'sprowt_settings') . '/theme',
        ),
        'sprowt_settings_copyright' => array(
            'variables' => array(),
            'template' => 'sprowt_settings_copyright',
            'path' => drupal_get_path('module', 'sprowt_settings') . '/theme',
        ),
        'sprowt_settings_rollout_admin' => array(
            'variables' => array(),
            'template' => 'sprowt_settings_rollout_admin',
            'path' => drupal_get_path('module', 'sprowt_settings') . '/theme',
        ),
    );
}

/**
 * Implements hook_block_info().
 */
function sprowt_settings_block_info()
{
    $blocks['sprowt_social_media'] = array(
        'info' => t('Sprowt: Footer social media'),
    );
    /*
     * We no longer use a site wide location
     *
    $blocks['sprowt_address'] = array(
      'info' => t('Sprowt: Footer address'),
    );
    */
    $blocks['sprowt_copyright'] = array(
        'info' => t('Sprowt: Footer copyright'),
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sprowt_settings_block_view($delta = '')
{
    $block = array();

    switch ($delta) {
        case 'sprowt_social_media':
            $block['content'] = theme('sprowt_settings_social_media');
            break;
        /*
         * We no longer use a site wide location
         *
          case 'sprowt_address':
            $block['content'] = theme('sprowt_settings_address');
            break;
        */
        case 'sprowt_copyright':
            $block['content'] = _sprowt_settings_copyright_block();
            break;
    }

    return $block;
}


/**
 * Implements hook_block_configure().
 */
function sprowt_settings_block_configure($delta = '') {
    $form = array();
    switch($delta) {
        case 'sprowt_copyright':
            $htmlField = variable_get('sprowt_settings_copyright_block', array(
                'value' => '',
                'format' => 'full_html'
            ));
            if(empty($htmlField['value'])) {
                $htmlField['value'] = theme('sprowt_settings_copyright');
            }
            $form['sprowt_settings_copyright_block'] = array(
                '#title' => 'Copyright Text',
                '#type' => 'text_format',
                '#default_value' => $htmlField['value'],
                '#format' => $htmlField['format'],
                '#description' => '<p>Some useful tokens:<br><ul><li>[current-year] : The current year</li><li>[company-name] : The company name defined in <a href="/admin/config/sprowt/sprowt-settings">Sprowt Settings</a></li></ul></p>'
            );
            break;
    }

    return $form;
}

/**
 * Implements hook_block_save().
 */
function sprowt_settings_block_save($delta = '', $edit = []) {
    switch($delta) {
        case 'sprowt_copyright':
            variable_set('sprowt_settings_copyright_block', $edit['sprowt_settings_copyright_block']);
    }
}

function _sprowt_settings_copyright_block(){
    $htmlField = variable_get('sprowt_settings_copyright_block', array(
        'value' => '',
        'format' => 'full_html'
    ));

    if(empty($htmlField['value'])) {
        $htmlField['value'] = theme('sprowt_settings_copyright');
    }

    return $htmlField['value'];
}

//Grabs and converts phone number to readable format.
function sprowt_settings_get_phone_number($replace = null)
{
    if (function_exists('sprowt_geoip_get_phone')) {
        $phone = sprowt_geoip_get_phone();
    }

    if (empty($phone)) {
        $phone = variable_get('sprowt_settings_phone_number', '');
    }

    return sprowt_settings_format_phone($phone, $replace);
}

/**
 * To alter the phone number pattern in template.php or module, see example:
 *
 *  function hook_sprowt_phone_pattern_alter(&$replace)
 *
 */
function sprowt_settings_format_phone($phone, $replace = null) {
    if (null === $replace) {
        drupal_alter('sprowt_phone_pattern', $replace);
    }

    if(empty($replace)) {
        $replace = "$1-$2-$3";
    }
    return preg_replace("/.*(\d{3})[^\d]{0,7}(\d{3})[^\d]{0,7}(\d{4}).*/", $replace, $phone);
}

//Takes a string a replaces shortcodes with values in that string
function _sprowt_settings_shortcode_replace($string)
{
    $shortcodes = array(
        '[company-name]' => variable_get('sprowt_settings_company_name'),
        '[phone-number]' => '<a href="tel:+1'.sprowt_settings_get_phone_number('$1$2$3').'">'.sprowt_settings_get_phone_number().'</a>',
        '[phone-number nolink]' => sprowt_settings_get_phone_number(),
        '[twitter]' => variable_get('sprowt_settings_twitter_handle'),
        '[facebook]' => variable_get('sprowt_settings_facebook_url'),
        '[linkedin]' => variable_get('sprowt_settings_linkedin_url'),
        '[google+]' => variable_get('sprowt_settings_gplus_url'),
        '[instagram]' => variable_get('sprowt_settings_instagram_url'),
        '[node-service]' => _sprowt_settings_node_service(),
        '[node-market]' => _sprowt_settings_node_market(),
        '[current-year]' => date('Y'),
        '[webform-to-email]' => variable_get('sprowt_settings_webform_to_email'),
    );

    //you can add other shortcodes via HOOK_sprowt_shortcode_replace_alter(&$shortcodes)
    drupal_alter('sprowt_shortcode_replace', $shortcodes);

    foreach ($shortcodes as $code => $value) {
        $string = str_replace($code, $value, $string);
    }

    $maps_found = preg_match_all('/((<p>)?\[map[\s]?(.*?)\](<\/p>)?)/', $string, $maps);


    if($maps_found){
        foreach($maps[0] as $map) {
            if(preg_match('/((?:<p>)?\[map[\s]?(.*?)\](?:<\/p>)?)/', $map, $m)) {
                if (preg_match('/src=([^\s\]]+)/', $m[2], $s)) {
                    $link = $s[1];
                }
                else {
                    $link = variable_get('sprowt_settings_map_embed', '');
                }

                if (preg_match('/.*google.*maps.*[\?|\&]mid=([^\&\"]+)/', $link, $l)) {
                    $mid = $l[1];
                    $link = '//www.google.com/maps/d/embed?mid=' . $mid;
                }

                if (preg_match('/.*google.*\/maps\/place\/(.*)\/@([\d\.-]+),([\d\.-]+),/', $link, $l)) {
                    $key = 'AIzaSyAdbUlxjFZ56MzUB_E8I3x1nSn0mJ-YCKI';
                    $link = "https://www.google.com/maps/embed/v1/place?key=$key&q={$l[1]}&center={$l[2]},{$l[3]}";
                    if(empty($m[2]) || strpos($m[2],'zoom=') === false) {
                        $link .= '&zoom=15';
                    }
                }

                if(empty($link)) {
                    $html = '';

                    global $user;
                    if($user->uid) {
                        $html = "<div style=\"text-align: center; padding: 20px;\">[[  Map link missing. Go <a href=\"/admin/config/system/sprowt-settings\">here</a> to set it.  ]]</div>";
                    }

                    $string = str_replace($m[1], $html, $string);
                    return $string;
                }

                if (!empty($m[2])) {

                    if (preg_match('/src=([^\s\]]+)/', $m[2], $s)) {

                        $src_parts = explode('?', $s[1]);

                        $src_params = explode('&',str_replace('&amp;','&',$src_parts[1]));

                        if(!empty($src_params[1])) {
                            unset($src_params[0]);
                            $m[2] .= ' ' . implode(' ',$src_params);
                        }

                        $m[2] = str_replace('src=' . $s[1], '', $m[2]);
                    }

                    $params = trim(str_replace(" ", "&", trim($m[2])), "&");
                    if(!empty($params)) {
                        if (strpos($link, '?') !== FALSE) {
                            $link .= '&amp;' . $params;
                        }
                        else {
                            $link .= '?' . $params;
                        }
                    }
                }

                $html = '<div class="media_embed map-embed"><iframe src="' . $link . '"></iframe></div>';
                $string = str_replace($m[1], $html, $string);
            }
        }
    }

    $hook = 'sprowt_shortcode_replace';

    // this allows for custom shortcode replacement functionality
    foreach (module_implements($hook) as $module) {
        $function = $module . '_' . $hook;
        // will call all modules implementing hook_hook_name
        // and can pass each argument as reference determined
        // by the function declaration
        if(function_exists($function)) {
            $string = $function($string);
        }
    }

    return $string;
}

function _sprowt_settings_map_embed_link_to_iframe($link) {
    if (preg_match('/.*google.*maps.*[\?|\&]mid=([^\&\"]+)/', $link, $l)) {
        $mid = $l[1];
        $link = '//www.google.com/maps/d/embed?mid=' . $mid;
    }

    if (preg_match('/.*google.*\/maps\/place\/(.*)\/@([\d\.-]+),([\d\.-]+),/', $link, $l)) {
        $key = 'AIzaSyAdbUlxjFZ56MzUB_E8I3x1nSn0mJ-YCKI';
        $link = "https://www.google.com/maps/embed/v1/place?key=$key&q={$l[1]}&center={$l[2]},{$l[3]}";
    }

    $html = '<div class="media_embed map-embed"><iframe src="' . $link . '"></iframe></div>';

    return $html;
}

//Grabs the current node service
function _sprowt_settings_node_service()
{
    $node = menu_get_object();
    if (!empty($node->field_service[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($node->field_service[LANGUAGE_NONE][0]['tid']);
        if (empty($term)) {
            return '';
        }
        return $term->name;
    }
    else {
        return '';
    }
}

//Grabs the current node market
function _sprowt_settings_node_market()
{
    $node = menu_get_object();
    if (!empty($node->field_market[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($node->field_market[LANGUAGE_NONE][0]['tid']);
        if (empty($term)) {
            return '';
        }
        return $term->name;
    }
    else {
        return '';
    }
}

function _sprowt_settings_can_replace() {
    $current_path = current_path();
    $current_alias = drupal_get_path_alias($current_path);

    $yes = !path_is_admin($current_path);

    $paths = array(
        'node/*/*'
    );

    foreach($paths as $path) {
        $yes = $yes && !drupal_match_path($current_path, $path);
        $yes = $yes && !drupal_match_path($current_alias, $path);
    }

    return $yes;
}

function sprowt_settings_preprocess_page(&$variables)
{
    //this is stupid. I could not, for the life of me, figure out how to do this in the installer
    if(drupal_is_front_page()) {
        $ltp_update = variable_get('sprowt_update_ltps', TRUE);
        if ($ltp_update) {
            //regenerate ltp aliases
            $nids = db_query("
        SELECT nid
        FROM node
        WHERE type IN (:types)
        ",
                [
                    ':types' => ['localtarget']
                ])->fetchCol();

            foreach (node_load_multiple($nids) as $node) {
                $node->path['pathauto'] = TRUE;
                node_save($node);
            }
            variable_set('sprowt_update_ltps', FALSE);
        }
    }
}

// implements hook_preprocess_block()
function sprowt_settings_preprocess_block(&$variables)
{
    if (_sprowt_settings_can_replace()) {
        if (!empty($variables['elements']['#block']->subject)) {
            $variables['elements']['#block']->subject = _sprowt_settings_shortcode_replace($variables['elements']['#block']->subject);
        }
        $variables['content'] = _sprowt_settings_shortcode_replace($variables['content']);
    }
}

// implements hook_preprocess_node()
function sprowt_settings_preprocess_node(&$variables)
{
    if (_sprowt_settings_can_replace()) {
        if (!empty($variables['title'])) {
            $variables['title'] = _sprowt_settings_shortcode_replace($variables['title']);
        }

        if (!empty($variables['content']['body']['0']['#markup'])) {
            $variables['content']['body']['0']['#markup'] = _sprowt_settings_shortcode_replace($variables['content']['body']['0']['#markup']);
        }
    }
}

function sprowt_settings_tokens_alter(&$replacements, $context)
{
    $options = $context['options'];

    if (isset($options['language'])) {
        $url_options['language'] = $options['language'];
        $language_code = $options['language']->language;
    }
    else {
        $language_code = NULL;
    }
    $sanitize = !empty($options['sanitize']);

    if ($context['type'] == 'node' && !empty($context['data']['node'])) {
        $node = $context['data']['node'];

        $tokens_replace = array(
            'title',
            'summary',
            'body'
        );
        foreach($tokens_replace as $token) {
            if (isset($context['tokens'][$token]) && isset($replacements[$context['tokens'][$token]])) {
                $replacements[$context['tokens'][$token]] = _sprowt_settings_shortcode_replace($replacements[$context['tokens'][$token]]);
            }
        }
        foreach($context['tokens'] as $key => $code) {
            if(strpos($key, 'field_') !== false && isset($replacements[$code])) {
                $replacements[$code] = _sprowt_settings_shortcode_replace($replacements[$code]);
            }
        }
    }
}

function ___get_states()
{
    return array(
        'AL' => 'Alabama',
        'AK' => 'Alaska',
        'AZ' => 'Arizona',
        'AR' => 'Arkansas',
        'CA' => 'California',
        'CO' => 'Colorado',
        'CT' => 'Connecticut',
        'DE' => 'Delaware',
        'DC' => 'District Of Columbia',
        'FL' => 'Florida',
        'GA' => 'Georgia',
        'HI' => 'Hawaii',
        'ID' => 'Idaho',
        'IL' => 'Illinois',
        'IN' => 'Indiana',
        'IA' => 'Iowa',
        'KS' => 'Kansas',
        'KY' => 'Kentucky',
        'LA' => 'Louisiana',
        'ME' => 'Maine',
        'MD' => 'Maryland',
        'MA' => 'Massachusetts',
        'MI' => 'Michigan',
        'MN' => 'Minnesota',
        'MS' => 'Mississippi',
        'MO' => 'Missouri',
        'MT' => 'Montana',
        'NE' => 'Nebraska',
        'NV' => 'Nevada',
        'NH' => 'New Hampshire',
        'NJ' => 'New Jersey',
        'NM' => 'New Mexico',
        'NY' => 'New York',
        'NC' => 'North Carolina',
        'ND' => 'North Dakota',
        'OH' => 'Ohio',
        'OK' => 'Oklahoma',
        'OR' => 'Oregon',
        'PA' => 'Pennsylvania',
        'RI' => 'Rhode Island',
        'SC' => 'South Carolina',
        'SD' => 'South Dakota',
        'TN' => 'Tennessee',
        'TX' => 'Texas',
        'UT' => 'Utah',
        'VT' => 'Vermont',
        'VA' => 'Virginia',
        'WA' => 'Washington',
        'WV' => 'West Virginia',
        'WI' => 'Wisconsin',
        'WY' => 'Wyoming',
    );
}

/**
 * implements hook_filter_info_alter()
 *
 * Used to replace the url filter process function with our own so it ignores info in brackets so we can use our own shortcodes
 */
function sprowt_settings_filter_info_alter(&$filters) {
    $filters['filter_url']['process callback'] = '_sprowt_settings_filter_url';
}

/**
 *
 * custom replacement for _filter_url()
 * https://api.drupal.org/api/drupal/modules!filter!filter.module/function/_filter_url/7
 *
 */
function _sprowt_settings_filter_url($text, $filter){
    // Tags to skip and not recurse into.
    $ignore_tags = 'a|script|style|code|pre';

    // Pass length to regexp callback.
    _filter_url_trim(NULL, $filter->settings ['filter_url_length']);

    // Create an array which contains the regexps for each type of link.
    // The key to the regexp is the name of a function that is used as
    // callback function to process matches of the regexp. The callback function
    // is to return the replacement for the match. The array is used and
    // matching/replacement done below inside some loops.
    $tasks = array();

    // Prepare protocols pattern for absolute URLs.
    // check_url() will replace any bad protocols with HTTP, so we need to support
    // the identical list. While '//' is technically optional for MAILTO only,
    // we cannot cleanly differ between protocols here without hard-coding MAILTO,
    // so '//' is optional for all protocols.
    // @see filter_xss_bad_protocol()
    $protocols = variable_get('filter_allowed_protocols', array('ftp', 'http', 'https', 'irc', 'mailto', 'news', 'nntp', 'rtsp', 'sftp', 'ssh', 'tel', 'telnet', 'webcal'));
    $protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

    // Prepare domain name pattern.
    // The ICANN seems to be on track towards accepting more diverse top level
    // domains, so this pattern has been "future-proofed" to allow for TLDs
    // of length 2-64.
    $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
    $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
    $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
    $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

    // Prepare pattern for optional trailing punctuation.
    // Even these characters could have a valid meaning for the URL, such usage is
    // rare compared to using a URL at the end of or within a sentence, so these
    // trailing characters are optionally excluded.
    $punctuation = '[\.,?!]*?';

    // Match absolute URLs.
    $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
    $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
    $tasks ['_filter_url_parse_full_links'] = $pattern;

    // Match e-mail addresses.
    $url_pattern = "[A-Za-z0-9._-]{1,254}@(?:$domain)";
    $pattern = "`($url_pattern)`";
    $tasks ['_filter_url_parse_email_links'] = $pattern;

    // Match www domains.
    $url_pattern = "www\.(?:$domain)/?(?:$trail)?";
    $pattern = "`($url_pattern)($punctuation)`";
    $tasks ['_filter_url_parse_partial_links'] = $pattern;

    // Each type of URL needs to be processed separately. The text is joined and
    // re-split after each task, since all injected HTML tags must be correctly
    // protected before the next task.
    foreach ($tasks as $task => $pattern) {
        // HTML comments need to be handled separately, as they may contain HTML
        // markup, especially a '>'. Therefore, remove all comment contents and add
        // them back later.
        _filter_url_escape_comments('', TRUE);
        $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

        // Split at all tags; ensures that no tags or attributes are processed.
        $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
        // PHP ensures that the array consists of alternating delimiters and
        // literals, and begins and ends with a literal (inserting NULL as
        // required). Therefore, the first chunk is always text:
        $chunk_type = 'text';
        // If a tag of $ignore_tags is found, it is stored in $open_tag and only
        // removed when the closing tag is found. Until the closing tag is found,
        // no replacements are made.
        $open_tag = '';

        for ($i = 0; $i < count($chunks); $i++) {
            if ($chunk_type == 'text') {
                // Only process this text if there are no unclosed $ignore_tags.
                if ($open_tag == '') {
                    // If there is a match, inject a link into this chunk via the callback
                    // function contained in $task.


                    //Pull out content in brackets temporarily so it can be ignored
                    if(preg_match_all('/(\[[^\]]+\])/',$chunks[$i],$b)) {
                        $brackets = array();
                        foreach($b as $bi => $bracket){

                            $brackets["[[$bi]]"] = $bracket[0];

                            $chunks[$i] = str_replace($bracket[0],"[[$bi]]", $chunks[$i]);
                        }
                    }

                    $chunks [$i] = preg_replace_callback($pattern, $task, $chunks [$i]);

                    //reinsert our bracket info
                    if(!empty($brackets)) {
                        foreach($brackets as $replace=>$bracket) {
                            $chunks[$i] = str_replace($replace, $bracket, $chunks[$i]);
                        }
                    }
                }
                // Text chunk is done, so next chunk must be a tag.
                $chunk_type = 'tag';
            }
            else {
                // Only process this tag if there are no unclosed $ignore_tags.
                if ($open_tag == '') {
                    // Check whether this tag is contained in $ignore_tags.
                    if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks [$i], $matches)) {
                        $open_tag = $matches [1];
                    }
                }
                // Otherwise, check whether this is the closing tag for $open_tag.
                else {
                    if (preg_match("`<\/$open_tag>`i", $chunks [$i], $matches)) {
                        $open_tag = '';
                    }
                }
                // Tag chunk is done, so next chunk must be text.
                $chunk_type = 'text';
            }
        }

        $text = implode($chunks);
        // Revert back to the original comment contents
        _filter_url_escape_comments('', FALSE);
        $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);
    }

    return $text;
}

/**
 * Menu alterations
 */

/**
 * Implementation of hook_theme_registry_alter()
 * We replace theme_menu_item_link with our own function.
 */
function sprowt_settings_theme_registry_alter(&$registry) {
    // Save previous value from registry in case another theme overwrites menu_item_link
    $registry['sprowt_settings_link_default'] = $registry['link'];
    $registry['link']['function'] = '_sprowt_settings_link';
}

/**
 * Override of theme_link()
 */
function _sprowt_settings_link(array $variables) {
    if (in_array($variables['path'], array('<phone_number>'))) {
        $phone = sprowt_settings_get_phone_number('$1$2$3');
        $variables['path'] = "tel:+1$phone";
    }

    if (in_array($variables['path'], array('<phone_number_sms>'))) {
        $phone = sprowt_settings_get_phone_number('$1$2$3');
        $variables['path'] = "sms:+1$phone";
    }

    if (in_array($variables['path'], array('<sprowt_customer_login>'))) {
        $link = variable_get('sprowt_customer_login');
        if(empty($link)) {
            $variables['path'] = '';
        }
        else {
            $variables['path'] = $link;
        }
    }

    // Call the original theme function for normal menu link.
    return theme('sprowt_settings_link_default', $variables);
}

/**
 * Implementation of hook_form_FROM_ID_alter()
 * Description changed, added phone_number as path types.
 */
function sprowt_settings_form_menu_edit_item_alter(&$form, &$form_state) {
    // Some menu items have a pre-defined path which cannot be modified hence no default_value
    if (isset($form['link_path']['#default_value'])) {
        $default_value = $form['link_path']['#default_value'];

        if (preg_match('/^<phone_number>\/[0-9]+$/', $default_value)) {
            $default_value = '<phone_number>';
        }

        $form['link_path']['#default_value'] = $default_value;
        $form['link_path']['#description'] .= '<p>Other values available:<br>';
        $list = '<ul>';

        $list .=  t('<li>Enter %p to automatically populate with a tel link using site\'s phone number.</li>', array('%p' => '<phone_number>'));
        $list .=  t('<li>Enter %p to automatically populate with an sms link using site\'s phone number.</li>', array('%p' => '<phone_number_sms>'));
        $list .=  t('<li>Enter %p to automatically populate with the customer login link set in <a href="/admin/config/sprowt/sprowt-settings" target="_blank">Sprowt Settings</a>.</li>', array('%p' => '<sprowt_customer_login>'));
        $list .= '</ul>';
        $form['link_path']['#description'] .= $list . '</p>';
    }
}

function _sprowt_settings_get_address(){
    require_once drupal_get_path('profile','sprowt') . '/includes/nodebuilder.php';
    $nid = db_query("
        SELECT nid
        FROM node n
        WHERE n.type = 'location'
        AND n.status = 1
        ORDER BY n.created ASC
    ")->fetchField();

    if(empty($nid)) {
        return [];
    }
    $location = new NodeBuilder(node_load($nid));

    $location_array = array(
        'street' => $location->field_street_address->value(),
        'locality' => $location->field_locality->value(),
        'province' => $location->field_state->value(),
        'postal_code' => $location->field_postal_code->value(),
    );

    return $location_array;
}

function _sprowt_settings_machine_name($name) {
    return preg_replace('/[^0-9a-zA-Z\_]/','',preg_replace('/\s/','_',str_replace('-','_',strtolower($name))));
}


function _sprowt_settings_get_main_menu_nodes() {
    $path = drupal_get_path('profile', 'sprowt');
    $data = _sprowt_get_data();

    $sprowt_path = drupal_get_path('profile', 'sprowt');
    $theme_path = drupal_get_path('theme', $data['branding']['theme']);
    $filename = 'main-menu_link_export.json';
    if(file_exists("$theme_path/$filename")) {
        $json = file_get_contents("$theme_path/$filename");
        $menu = json_decode($json, true);
    }
    else if(file_exists("$sprowt_path/$filename")) {
        $json = file_get_contents("$sprowt_path/$filename");
        $menu = json_decode($json, true);
    }

    if(empty($menu)) {
        return false;
    }

    $return = [];
    foreach($menu['menu_links'] as $m) {
        $nid = str_replace('node/','', $m['link_path']);
        $uuids = [$menu['uuid_map'][$nid]];
        $node = entity_uuid_load('node', $uuids);
        if(!empty($node)) {
            $node = array_shift($node);
            $return[$menu['uuid_map'][$nid]] = [
                'title' => $m['link_title'],
                'node' => $node
            ];
        }
    }

    return $return;
}

/**
 * Implements hook_cb_identifier_list().
 * @return array
 */

function sprowt_settings_cb_identifier_list() {
    $identifiers = array();
    $links = _sprowt_settings_get_main_menu_nodes();

    foreach($links as $link) {
        if($link['node']->type == 'page') {
            $identifiers['<' . _sprowt_settings_machine_name($link['title']) . '>'] = t('Corresponds to imported basic page with title: ' . $link['node']->title);
        }
    }


    return $identifiers;
}

/**
 * Implements hook_cb_identifier_values().
 *
 * @param $identifier
 * @param $obj
 *
 * @return array|null
 */
function sprowt_settings_cb_identifier_values($identifier, $obj) {
    $crumb_items = NULL;
    $links = _sprowt_settings_get_main_menu_nodes();

    foreach($links as $link) {
        $node = $link['node'];
        $id = '<' . _sprowt_settings_machine_name($link['title']) . '>';
        if($id == $identifier) {
            $path = drupal_get_path_alias('node/' . $node->nid);
            $crumb_item = array(
                'crumb' => l($obj['title'], $path),
                'title' => $obj['title'],
                'href' => $path
            );
            $crumb_items[] = $crumb_item;
        }
    }

    return $crumb_items;
}

/**
 * Implements hook_webform_select_options_info().
 */
function sprowt_settings_webform_select_options_info() {
    $items = array();

    $items['services'] = array(
        'title' => t('Sprowt Services'),
        'options callback' => '_sprowt_settings_webform_options_services',
    );

    $items['markets'] = array(
        'title' => t('Sprowt Markets'),
        'options callback' => '_sprowt_settings_webform_options_markets',
    );

    $items['market_states'] = array(
        'title' => t('Sprowt Market States'),
        'options callback' => '_sprowt_settings_webform_options_market_states',
    );

    return $items;
}

function _sprowt_settings_webform_options_services() {
    $options = array();
    $services = db_query("
        SELECT title
        FROM node n
        WHERE n.type = 'service'
        AND n.status = 1
        ORDER BY n.title ASC
    ")->fetchCol();

    foreach($services as $service) {
        $options[$service] = $service;
    }

    return $options;
}

function _sprowt_settings_webform_options_markets() {
    $options = array();
    $markets = db_query("
        SELECT title
        FROM node n
        WHERE n.type = 'market'
        AND n.status = 1
        ORDER BY n.title ASC
    ")->fetchCol();

    foreach($markets as $market) {
        $options[$market] = $market;
    }

    return $options;
}

function _sprowt_settings_webform_options_market_states() {
    $options = array();
    $states = db_query("
    SELECT DISTINCT field_state_value
    FROM field_data_field_state
    ORDER BY field_state_value
  ")->fetchCol();

    foreach($states as $state) {
        $options[$state] = $state;
    }

    return $options;
}

function _sprowt_settings_node_uuid_redirect($uuid, $op = '') {
    $array = entity_get_id_by_uuid('node', array($uuid));
    if(empty($array)) {
        return drupal_not_found();
    }

    $nid = $array[$uuid];

    if(!empty($op)) {
        drupal_goto("node/$nid/$op");
    }
    else {
        drupal_goto("node/$nid");
    }
}

/**
 * Implements hook_token_info().
 */
function sprowt_settings_token_info() {
    $shortcodes = array(
        '[company-name]' => variable_get('sprowt_settings_company_name'),
        '[phone-number]' => '<a href="tel:+1'.sprowt_settings_get_phone_number('$1$2$3').'">'.sprowt_settings_get_phone_number().'</a>',
        '[phone-number nolink]' => sprowt_settings_get_phone_number(),
        '[twitter]' => variable_get('sprowt_settings_twitter_handle'),
        '[facebook]' => variable_get('sprowt_settings_facebook_url'),
        '[linkedin]' => variable_get('sprowt_settings_linkedin_url'),
        '[google+]' => variable_get('sprowt_settings_gplus_url'),
        '[node-service]' => _sprowt_settings_node_service(),
        '[current-year]' => date('Y'),
    );

    $types = array(
        'sprowt' => array(
            'name' => 'Sprowt',
            'description' => 'Sprowt specific tokens',
            'needs-data' => 'node'
        ),
        'sprowt_phone' => array(
            'name' => 'Company Phone Number',
            'description' => 'Phone Number',
            'needs-data' => 'sprowt'
        ),
        'server' => array(
            'name' => 'Server Variables',
            'description' => 'Variables from the $_SERVER global.'
        ),
    );


    $tokens = array(
        'sprowt' => array(
            'company_name' => array(
                'name' => 'Company Name',
                'description' => 'Company Name',
            ),
            'sprowt_phone' => array(
                'name' => 'Company Phone Number',
                'description' => 'Phone Number',
                'type' => 'sprowt_phone',
            ),
            'sprowt_webform_to_email' => array(
                'name' => 'Webform Email',
                'description' => 'Email typically used as the \'to\' email in webforms.',
            ),
        ),
        'sprowt_phone' => array(
            'text_only' => array(
                'name' => 'Text Only',
                'description' => 'Company Phone Number, text only. No link',
            ),
            'unformatted' => array(
                'name' => 'Unformatted',
                'description' => 'Company Phone Number, numbers only',
            ),
        ),
        'server' => array(
            'HTTP_REFERER' => array(
                'name' => t('HTTP_REFERER'),
                'description' => t('The address of the page (if any) which referred the user agent to the current page. This is set by the user agent. Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature. In short, it cannot really be trusted.')
            ),
            'HTTP_USER_AGENT' => array(
                'name' => 'HTTP_USER_AGENT',
                'description' => 'Contents of the User-Agent: header from the current request, if there is one. This is a string denoting the user agent being which is accessing the page.'
            ),
        ),
    );

    $tokens['site']['sprowt'] = array(
        'name' => 'Sprowt',
        'description' => 'Sprowt specific tokens',
        'type' => 'sprowt'
    );
    $tokens['site']['logo'] = array(
        'name' => t('Site logo'),
        'description' => t('The image showing the site logo.'),
    );
    $tokens['site']['logo-url'] = array(
        'name' => t('Site logo URL'),
        'description' => t('URL to the image showing the site logo.'),
    );
    return array(
        'types' => $types,
        'tokens' => $tokens
    );
}

/**
 * Implements hook_tokens().
 */
function sprowt_settings_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    foreach($tokens as $name => $original) {
        switch($name) {
            case 'sprowt:company_name':
                $replacements[$original] = variable_get('sprowt_settings_company_name', '');
                break;
            case 'sprowt:sprowt_phone':
                $replacements[$original] = '<a href="tel:+1'.sprowt_settings_get_phone_number('$1$2$3').'">'.sprowt_settings_get_phone_number().'</a>';
                break;
            case 'sprowt:sprowt_phone:text_only':
                $replacements[$original] = sprowt_settings_get_phone_number();
                break;
            case 'sprowt:sprowt_phone:unformatted':
                $replacements[$original] = sprowt_settings_get_phone_number('$1$2$3');
                break;
            case 'sprowt:sprowt_webform_to_email':
                $replacements[$original] = variable_get('sprowt_settings_webform_to_email', '');
        }
    }
    if($type == 'sprowt') {
        foreach($tokens as $name => $original) {
            switch($name) {
                case 'company_name':
                    $replacements[$original] = variable_get('sprowt_settings_company_name', '');
                    break;
                case 'sprowt_phone':
                    $replacements[$original] = '<a href="tel:+1'.sprowt_settings_get_phone_number('$1$2$3').'">'.sprowt_settings_get_phone_number().'</a>';
                    break;
                case 'sprowt_phone:text_only':
                    $replacements[$original] = sprowt_settings_get_phone_number();
                    break;
                case 'sprowt_phone:unformatted':
                    $replacements[$original] = sprowt_settings_get_phone_number('$1$2$3');
                    break;
                case 'sprowt_webform_to_email':
                    $replacements[$original] = variable_get('sprowt_settings_webform_to_email', '');
            }
        }
    }

    // Site tokens.
    if ($type == 'site') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'logo':
                    // Use a logo; but only if we have one to use.
                    $replacements[$original] = '';
                    if ($uri = theme_get_setting('logo')) {
                        $replacements[$original] = theme('image', array('path' => $uri));
                    }
                    break;

                case 'logo-url':
                    $replacements[$original] = '';
                    if ($uri = theme_get_setting('logo')) {
                        $replacements[$original] = $uri;
                    }
                    break;
            }

            // [site:logo-url:*] chained tokens.
            if ($url_tokens = token_find_with_prefix($tokens, 'logo-url')) {
                $uri = theme_get_setting('logo');
                $replacements += token_generate('url', $url_tokens, array('path' => $uri), $options);
            }
        }
    }

    if ($type == 'server') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'HTTP_REFERER':
                    $replacements[$original] = $_SERVER['HTTP_REFERER'];
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;

                case 'HTTP_USER_AGENT':
                    $replacements[$original] = $_SERVER['HTTP_USER_AGENT'];
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
            }
        }
    }

    return $replacements;
}


/**
 * Add color picker to hex field.
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sprowt_settings_field_widget_color_field_plain_text_form_alter(&$element, &$form_state, $context)
{
    $path = drupal_get_path('profile', 'sprowt');
    $element['rgb']['#attached']['css'][] = $path . "/css/spectrum.css";
    $element['rgb']['#attached']['js'][] = $path . "/js/spectrum.js";
    $element['rgb']['#attached']['js'][] = drupal_get_path('module', 'sprowt_settings') . "/js/sprowt_colorfield.js";
    $element['rgb']['#attached']['css'][] = drupal_get_path('module', 'sprowt_settings') . "/css/sprowt_colorfield.css";

    $id = drupal_html_id('colorfield-spectrum');

    $spectrum_addition = array(
        '#attributes' => array(
            'class' => array('color'),
            'data-spectrum' => $id,
        ),
        '#prefix' => '<div class="color-picker">',
        '#suffix' => '<input type="text" id="'.$id.'" class="spectrum"></div>',
    );
    $element['rgb'] = array_merge($element['rgb'], $spectrum_addition);
}

/**
 * Implements hook_preprocess_field().
 */
function sprowt_settings_preprocess_field(&$variables)
{
    $element = &$variables['element'];
    $parent = &$element['#object'];

    if($element['#field_type'] == 'link_field') {
        foreach($variables['items'] as &$item) {
            $url = $item['#element']['url'];
            if(strpos($url, '#') !== false) {
                $url_parts = explode('#', $url);
                array_shift($url_parts);
                $hash = '#' . implode('#', $url_parts);
                if($hash == '##phone_number##') {
                    $phone = sprowt_settings_get_phone_number('$1$2$3');
                    $item['#element']['url'] = 'tel:+1' . $phone;
                }
            }
        }
    }
}

/**
 * Implements hook_node_export_access_export_alter().
 */
function sprowt_settings_node_export_access_export_alter(&$access, $node) {
    $isSync = drupal_static('sprowt_sync', false);
    if($isSync) {
        $access = true;
    }
}

/**
 * Implements hook_node_export_access_import_alter().
 */
function sprowt_settings_node_export_access_import_alter(&$access, $node) {
    $isSync = drupal_static('sprowt_sync', false);
    if($isSync) {
        $access = true;
    }
}

function _sprowt_settings_request_nodes() {
    $opts = $_POST;


    if(!empty($_GET['debug']) && $_SERVER['SERVER_ADDR'] == '127.0.0.1') {
        $opts = $_GET;
    }

    $sync = new SprowtNodeSync($opts);

    $valid = $sync->validate($opts['secret']);

    if(empty($valid)) {
        drupal_access_denied();
    }

    $format = empty($opts['format']) ? 'json' : $opts['format'];

    $data = [
        'code' => $sync->export($format)
    ];

    if(!empty($_GET['debug_output']) && $format = 'json') {
        $data['code'] = json_decode($data['code'], true);
    }

    drupal_json_output($data);
}

function _sprowt_settings_request_nodes_rollout() {
    $opts = [
        'uuids' => variable_get('sprowt_rollout_uuids', [])
    ];

    $sync = new SprowtNodeSync($opts);

    $valid = $sync->validate($_POST['secret']);

    if(empty($valid)) {
        drupal_access_denied();
    }



    $format = empty($opts['format']) ? 'json' : $opts['format'];

    $data = [
        'code' => $sync->export($format)
    ];

    if(!empty($_GET['debug_output']) && $format = 'json') {
        $data['code'] = json_decode($data['code'], true);
    }

    drupal_json_output($data);

}

function _sprowt_settings_request_nodes_menu() {
    $vars = $_POST;
    if(!empty($_GET['debug']) && $_SERVER['SERVER_ADDR'] == '127.0.0.1') {
        $vars = $_GET;
    }

    $menuName = $vars['menu'];
    $menuLinks = menu_tree($menuName);
    $nids = [];
    foreach($menuLinks as $link) {
        $path = drupal_get_normal_path($link['#href']);
        if(!empty($path) && strpos($path, 'node/') === 0) {
            $nids[] = str_replace('node/', '', $path);
        }
    }
    $sync = new  SprowtNodeSync([
        'nids' => $nids
    ]);

    $valid = $sync->validate($_POST['secret']);

    if(empty($valid)) {
        drupal_access_denied();
    }

    $format = empty($vars['format']) ? 'json' : $vars['format'];

    $data = [
        'code' => $sync->export($format)
    ];

    if(!empty($_GET['debug_output']) && $format = 'json') {
        $data['code'] = json_decode($data['code'], true);
    }

    drupal_json_output($data);
}

function _sprowt_settings_rollout_access() {
    $ns = new SprowtNodeSync();
    return $ns->isDataSite();
}

/**
 * Implements hook_js_alter().
 */
function sprowt_settings_js_alter(&$javascript) {
    //do nothing
}

function _sprowt_settings_rollout_form($form, $form_state) {

    $nodes = db_query("
        SELECT n.nid, n.uuid, n.title, n.type, n.status, t.name as 'type_name'
        FROM node n
        LEFT JOIN node_type t on t.type = n.type
        ORDER BY t.name ASC, n.title ASC
    ")->fetchAll(PDO::FETCH_ASSOC);

    $form['all_nodes'] = [
        '#type' => 'hidden',
        '#attributes' => [
            'id' => 'all-nodes'
        ],
        '#value' => json_encode($nodes)
    ];

    $uuids = variable_get('sprowt_rollout_uuids', []);

    $form['rollout_uuids'] = [
        '#type' => 'hidden',
        '#attributes' => [
            'id' => 'rollout-uuids'
        ],
        '#default_value' => json_encode($uuids)
    ];

    $form['#submit'] = ['_sprowt_settings_rollout_admin_form_submit'];

    $form['actions'] = [
        'submit' => [
            '#type' => 'submit',
            '#value' => 'Save'
        ]
    ];

    return $form;
}

function _sprowt_settings_rollout_admin_form_submit($form, $form_state) {
    $values = $form_state['values'];

    $uuids = json_decode($values['rollout_uuids'], true);
    variable_set('sprowt_rollout_uuids', $uuids);
}


function _sprowt_settings_rollout() {
    drupal_add_js('https://code.jquery.com/jquery-3.3.1.js');
    drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/jsviews/1.0.3/jsviews.min.js');
    drupal_add_js(drupal_get_path('module', 'sprowt_settings') . '/js/rollout.js');
    drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/js/select2.min.js');
    drupal_add_css('https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/css/select2.min.css', 'external');

    return theme('sprowt_settings_rollout_admin', [
        'form' => drupal_get_form('_sprowt_settings_rollout_form')
    ]);
}

/**
 * Implements hook_node_load().
 */
function sprowt_settings_node_load($nodes, $types) {
    $uuids = variable_get('sprowt_rollout_uuids', []);

    foreach($nodes as $node) {
        if(in_array($node->uuid, $uuids)) {
            $node->sprowt_rollout = true;
        }
    }
}

/**
 * Implements hook_node_insert().
 */
function sprowt_settings_node_insert($node) {
    $uuids = variable_get('sprowt_rollout_uuids', []);

    if(!in_array($node->uuid, $uuids)) {
        if(!empty($node->sprowt_rollout)) {
            $uuids[] = $node->uuid;
            variable_set('sprowt_rollout_uuids', $uuids);
        }
    }
}

/**
 * Implements hook_node_update().
 */
function sprowt_settings_node_update($node) {
    $uuids = variable_get('sprowt_rollout_uuids', []);

    if(!empty($node->sprowt_rollout)) {
        if(!in_array($node->uuid, $uuids)) {
            $uuids[] = $node->uuid;
            variable_set('sprowt_rollout_uuids', $uuids);
        }
    }
    else {
        if(in_array($node->uuid, $uuids)) {
            unset($uuids[array_search($node->uuid, $uuids)]);
            variable_set('sprowt_rollout_uuids', array_values($uuids));
        }
    }

}

/**
 * Implements hook_node_delete().
 */
function sprowt_settings_node_delete($node) {
    $uuids = variable_get('sprowt_rollout_uuids', []);
    if(in_array($node->uuid, $uuids)) {
        unset($uuids[array_search($node->uuid, $uuids)]);
        variable_set('sprowt_rollout_uuids', array_values($uuids));
    }
}

function _sprowt_settings_node_sync_alter(&$form, $form_state) {
    if(_sprowt_settings_rollout_access()) {
        $form['options']['sprowt_rollout'] = [
            '#type' => 'checkbox',
            '#title' => 'Include in Sprowt Rollout',
            '#default_value' => !empty($form['#node']) ? !empty($form['#node']->sprowt_rollout) ? true : false : false
        ];
    }
}

/**
 * Implements hook_node_submit().
 */
function sprowt_settings_node_submit($node, $form, &$form_state) {
    $values = $form_state['values'];
    if(_sprowt_settings_rollout_access()) {
        if(!empty($values['sprowt_rollout'])) {
            $node->sprowt_rollout = true;
        }
        else {
            $node->sprowt_rollout = false;
        }
    }
}

function _sprowt_settings_get_social_media_accounts() {
    $accounts = variable_get('sprowt_settings_social_media', []);
    if(!is_array($accounts)) {
        $accounts = json_decode($accounts, true);
    }
    if(!is_array($accounts)) {
        $accounts = [];
    }

    $inAccounts = function($machineName) use ($accounts) {
        $filtered = array_filter($accounts, function($account) use ($machineName) {
            return $account['machineName'] == $machineName;
        });

        return !empty($filtered);
    };

    $legacy = [
        'facebook' => [
            'name' => 'Facebook',
            'type' => 'facebook',
            'machineName' => 'facebook',
            'iconClass' => 'facebook',
            'link' =>  variable_get('sprowt_settings_facebook_url', null),
            'description' => variable_get('sprowt_settings_facebook_description', null)
        ],
        'twitter' => [
            'name' => 'Twitter',
            'type' => 'twitter',
            'machineName' => 'twitter',
            'iconClass' => 'twitter',
            'link' =>  variable_get('sprowt_settings_twitter_handle', null),
            'description' => variable_get('sprowt_settings_twitter_description', null)
        ],
        'instagram' => [
            'name' => 'Instagram',
            'type' => 'instagram',
            'machineName' => 'instagram',
            'iconClass' => 'instagram',
            'link' => variable_get('sprowt_settings_instagram_handle', null),
            'description' => variable_get('sprowt_settings_instagram_description', null)
        ],
        'gplus' => [
            'name' => 'Google',
            'type' => 'gplus',
            'machineName' => 'gplus',
            'iconClass' => 'google-plus',
            'link' => variable_get('sprowt_settings_gplus_url', null),
            'description' => variable_get('sprowt_settings_gplus_description', null)
        ],
        'linkedin' => [
            'name' => 'LinkedIn',
            'type' => 'linkedin',
            'machineName' => 'linkedin',
            'iconClass' => 'linkedin',
            'link' => variable_get('sprowt_settings_linkedin_url', null),
            'description' => variable_get('sprowt_settings_linkedin_description', null)
        ]
    ];

    foreach($legacy as $legacyItem) {
        if(!empty($legacyItem['link']) && !$inAccounts($legacyItem['machineName'])) {
            $accounts[] = $legacyItem;
        }
    }

    return $accounts;
}

function _sprowt_settings_set_social_media_accounts($accounts) {
    variable_set('sprowt_settings_social_media', $accounts);
    $legacy = [
        'facebook' => [
            'linkVar' =>  'sprowt_settings_facebook_url',
            'descriptionVar' => 'sprowt_settings_facebook_description'
        ],
        'twitter' => [
            'linkVar' =>  'sprowt_settings_twitter_handle',
            'descriptionVar' => 'sprowt_settings_twitter_description'
        ],
        'instagram' => [
            'linkVar' => 'sprowt_settings_instagram_handle',
            'descriptionVar' => 'sprowt_settings_instagram_description'
        ],
        'gplus' => [
            'linkVar' => 'sprowt_settings_gplus_url',
            'descriptionVar' => 'sprowt_settings_gplus_description'
        ],
        'linkedin' => [
            'linkVar' => 'sprowt_settings_linkedin_url',
            'descriptionVar' => 'sprowt_settings_linkedin_description'
        ]
    ];
    $found = [];
    foreach($accounts as $account) {
        if(!empty($legacy[$account['machineName']])) {
            $vars = $legacy[$account['machineName']];
            variable_set($vars['linkVar'], $account['link']);
            variable_set($vars['descriptionVar'], $account['description']);
            $found[] = $account['machineName'];
        }
    }

    foreach($legacy as $machineName => $vars) {
        if(!in_array($machineName, $found)) {
            foreach($vars as $var) {
                variable_del($var);
            }
        }
    }

    return $accounts;
}

function _sprowt_settings_socialmedia_form($form, $form_state) {

    $socialMedia = [];
    $socialMedia[] = [
        'name' => 'Facebook',
        'machineName' => 'facebook',
        'iconClass' => 'facebook',
        'linkTitle' => 'Company Facebook URL',
        'linkPlaceholder' => 'http://facebook.com/examplecompany'
    ];

    $socialMedia[] = [
        'name' => 'Twitter',
        'machineName' => 'twitter',
        'iconClass' => 'twitter',
        'linkTitle' => 'Company Twitter Handle',
        'linkDescription' => 'Company twitter handle (do not include the @).',
        'linkPlaceholder' => 'examplecompany'
    ];

    $socialMedia[] = [
        'name' => 'Google+',
        'machineName' => 'gplus',
        'iconClass' => 'google-plus',
        'linkTitle' => 'Company Google+ URL',
        'linkPlaceholder' => 'http://gplusurl.com'
    ];

    $socialMedia[] = [
        'name' => 'LinkedIn',
        'machineName' => 'linkedin',
        'iconClass' => 'linkedin',
        'linkTitle' => 'Company LinkedIn URL',
        'linkPlaceholder' => 'https://www.linkedin.com/company/example-company'
    ];

    $socialMedia[] = [
        'name' => 'Instagram',
        'machineName' => 'instagram',
        'iconClass' => 'instagram',
        'linkTitle' => 'Company Instagram Handle',
        'linkDescription' => 'Company instagram handle (do not include the @).',
        'linkPlaceholder' => 'examplecompany'
    ];

    $socialMedia[] = [
        'name' => 'Pinterest',
        'machineName' => 'pinterest',
        'iconClass' => 'pinterest-p',
        'linkTitle' => 'Company Pinterest URL',
        'linkPlaceholder' => 'https://www.pinterest.com/example_company'
    ];

    $socialMediaDefault = [
        'linkDescription' => 'Begins with "http"',
        'linkDescriptionTitle' => 'Link Description',
        'linkDescriptionDescription' => 'Descriptive text for this service, e.g. "Be our friend", "Follow us", "Pin us", etc.',
        'hide' => [
            '.account-name',
            '.account-machine-name',
            '.account-icon'
        ]
    ];

    foreach($socialMedia as &$sm) {
        $sm += $socialMediaDefault;
    }

    $form['sprowt_settings_social_template'] = array(
        '#type' => 'fieldset',
        '#title' => t('Account Name'),
        '#prefix' => '<script type="text/html-template" id="socialTemplate" data-social-media-settings="'.htmlentities(json_encode($socialMedia)).'">',
        '#suffix' => '</script>',
//        '#prefix' => '<div type="text/html-template" id="socialTemplate" data-social-media-settings="'.htmlentities(json_encode($socialMedia)).'">',
//        '#suffix' => '</div>',
        '#attributes' => [
            'class' => ['account-set']
        ]
    );

    $form['sprowt_settings_social_template']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Account Type'),
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('Name of the type of account (e.g. "Facebook")'),
        '#prefix' => '<div class="account-name">',
        '#suffix' => '</div>',
    );

    $form['sprowt_settings_social_template']['machineName'] = array(
        '#type' => 'textfield',
        '#title' => t('Account Machine Name'),
        '#required' => true,
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('Machine name of the type of account (e.g. "facebook"). Should be all lowercase with numbers, letters, and underscores. No spaces. Should also be unique.'),
        '#prefix' => '<div class="account-machine-name">',
        '#suffix' => '</div>',
        '#attributes' => [
            'required' => 'required'
        ]
    );

    $form['sprowt_settings_social_template']['icon'] = array(
        '#type' => 'textfield',
        '#title' => t('Account FontAwesome Icon'),
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => 'The icon name for this account. Found <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">here</a>. Use the icon name (should be all lowercase with dashes). DO NOT INCLUDE the "fa-"',
        '#prefix' => '<div class="account-icon">',
        '#suffix' => '</div>',
    );

    $form['sprowt_settings_social_template']['link'] = array(
        '#type' => 'textfield',
        '#title' => t('Account URL'),
        '#required' => true,
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('The URL being linked to'),
        '#prefix' => '<div class="account-link">',
        '#suffix' => '</div>',
        '#attributes' => [
            'required' => 'required'
        ]
    );

    $form['sprowt_settings_social_template']['description'] = array(
        '#type' => 'textfield',
        '#title' => t('Link Description'),
        '#default_value' => variable_get('sprowt_settings_facebook_description'),
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t("Descriptive text for the link. E.g. 'Be our friend'"),
        '#prefix' => '<div class="account-description">',
        '#suffix' => '</div>',
    );

    $form['sprowt_settings_social_template']['removeButton'] = array(
        '#type' => 'button',
        '#value' => 'Remove',
        '#attributes' => [
            'class' => ['remove-button']
        ]
    );

    $accounts = _sprowt_settings_get_social_media_accounts();

    $form['sprowt_settings_social_media'] = [
        '#type' => 'hidden',
        '#default_value' => json_encode($accounts),
        '#attributes' => [
            'id' => 'sprowt_settings_social_media'
        ]
    ];

    $form['sprowt_settings_social_media_account_wrapper'] = [
        '#type' => 'markup',
        '#markup' => '<div id="sprowt-settings-social-media-accounts"></div>'
    ];

    $selectOptions = [
        '' => '- Select -'
    ];

    foreach($socialMedia as $media) {
        $selectOptions[$media['machineName']] = $media['name'];
    }

    $selectOptions['other'] = 'Other';

    $form['sprowt_settings_social_media_add'] = [
        '#type' => 'select',
        '#title' => 'Add Account',
        '#options' => $selectOptions,
        '#suffix' => '<input id="sprowt-settings-social-media-add-button" type="button" class="button form-submit" value="Add"/>',
        '#attributes' => [
            'class' => ['sprowt_settings_social_media_add']
        ]
    ];

    $form['#attached']['js'][] = drupal_get_path('module', 'sprowt_settings') . '/js/social_media.js';

    $form['#validate'][] = '_sprowt_settings_socialmedia_form_validate';
    $form['#submit'][] = '_sprowt_settings_socialmedia_form_submit';

    return $form;
}

function _sprowt_settings_socialmedia_form_validate(&$form, &$form_state) {
    $values = &$form_state['values'];
    $removeKeys = [
        'sprowt_settings_social_media_add',
        'sprowt_settings_social_template',
        'name',
        'machineName',
        'icon',
        'link',
        'description',
        'removeButton'
    ];

    foreach($removeKeys as $key) {
        if(isset($values[$key])) {
            unset($values[$key]);
        }
    }


    $accounts = json_decode($values['sprowt_settings_social_media'], true);

    $machineNames = [];
    $error = false;
    foreach($accounts as $media) {
        if(in_array($media['machineName'], $machineNames)) {
            form_set_error('sprowt_settings_social_media--machineNameUnique', 'Social media machine name must be unique.');
            $error = true;
        }
        else if(empty($media['machineName'])) {
            form_set_error('sprowt_settings_social_media--machineNameRequired', 'Social media machine name is required.');
            $error = true;
        }
        else if(!preg_match('/^[a-z0-9_]+$/', $media['machineName'])) {
            form_set_error('sprowt_settings_social_media--machineNameAccurate', 'Social media machine name must be only lowercase letters, numbers, and underscores.');
            $error =  true;
        }

        if(empty($media['link'])) {
            form_set_error('sprowt_settings_social_media--linkRequired', 'Social media machine URL is required.');
            $error = true;
        }
        $machineNames[] = $media['machineName'];
    }

    if(!$error) {
        $values['sprowt_settings_social_media'] = $accounts;
    }
}

function _sprowt_settings_socialmedia_form_submit(&$form, &$form_state) {
    $values = $form_state['values'];
    $accounts = $values['sprowt_settings_social_media'];
    _sprowt_settings_set_social_media_accounts($accounts);
}

function _sprowt_settings_unlock_hardcoded_url_alias($alias) {
    $paths = variable_get('sprowt_settings_paths', array());
    $foundUuid = null;
    foreach($paths as $uuid => $pathAlias) {
        if($alias == $pathAlias) {
            unset($paths[$uuid]);
            $foundUuid = $uuid;
        }
    }
    if(empty($foundUuid)) {
        throw new \Exception('No hardcoded alias found for: ' . $alias);
    }

    variable_set('sprowt_settings_paths', $paths);
    db_delete('url_alias')->condition('alias', $alias)->execute();
}

function _sprowt_settings_change_hardcoded_url_alias($alias, $newAlias) {
    $paths = variable_get('sprowt_settings_paths', array());
    $foundUuid = null;
    foreach($paths as $uuid => $pathAlias) {
        if($alias == $pathAlias) {
            unset($paths[$uuid]);
            $foundUuid = $uuid;
        }
    }
    if(empty($foundUuid)) {
        throw new \Exception('No hardcoded alias found for: ' . $alias);
    }

    variable_set('sprowt_settings_paths', $paths);
    db_delete('url_alias')->condition('alias', $alias)->execute();

    $node = entity_uuid_load('node', [$foundUuid]);
    if(!empty($node)) {
        $node = array_shift($node);
        $node->path = [
            'pathauto' => 0,
            'alias' => $newAlias
        ];
        db_delete('url_alias')->condition('source', 'node/' . $node->nid)->execute();
        path_node_update($node);
        pathauto_node_update($node);

    }

    $contexts = context_load(NULL, TRUE);
    foreach($contexts as $context_name => $context) {
        $context_changed = false;
        if(!empty($context->conditions['path']['values'])) {
            foreach($context->conditions['path']['values'] as $key => $path) {
                if($path == $alias) {
                    $context->conditions['path']['values'][$key] = $newAlias;
                    $context_changed = true;
                }
            }
        }

        if($context_changed) {
            context_save($context);
        }
    }
}

function _sprowt_settings_unlock_alias_form($form, &$form_state) {
    $paths = variable_get('sprowt_settings_paths', array());
    drupal_set_title('Change Hardcoded URL Alias');

    $pathOptions = [];
    foreach($paths as $path) {
        $pathOptions[$path] = $path;
    }

    $form['alias'] = [
        '#type' => 'select',
        '#title' => 'Old Alias',
        '#options' => $pathOptions,
        '#required' => true
    ];

    $form['newAlias'] = [
        '#type' => 'textfield',
        '#title' => 'New Alias',
        '#description' => 'New alias you want to use.',
        '#required' => true
    ];

    $form['actions'] = [
        'submit' => [
            '#type' => 'submit',
            '#value' => 'Save',
            '#submit' => ['_sprowt_settings_unlock_alias_form_submit']
        ]
    ];

    return $form;

}

function _sprowt_settings_unlock_alias_form_submit($form,  &$form_state) {
    $values = $form_state['values'];
    $alias = $values['alias'];
    $newAlias = rawurlencode(ltrim($values['newAlias'], '/'));
    _sprowt_settings_change_hardcoded_url_alias($alias, $newAlias);
    $newUrl = url($newAlias);
    drupal_set_message("New <a href=\"{$newUrl}\" target=\"_blank\">alias</a> created!");
}
