<?php

/**
 * Implements hook_menu().
 */
function review_boost_menu() {
    $items['customer-survey/%'] = array(
        'title' => 'Thank you for taking our customer satisfaction survey!',
        'page callback' => '_review_boost_questionnaire',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );

    $items['customer-survey/%/thank-you'] = array(
        'title' => 'Thank you!',
        'page callback' => '_review_boost_questionnaire_complete',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );

    $items['admin/survey'] = array(
        'title' => 'Review Boost',
        'description' => 'Review Boost',
        'page callback' => '_review_boost_admin_menu_block_page',
        'access callback' => '_review_boost_admin_access',
        'file' => 'review_boost.admin.inc',
        'position' => 'left',
    );

    $items['admin/survey/import-csv'] = array(
        'title' => 'Import CSV',
        'description' => 'Import a list of customers to receive a survey request',
        'page callback' => '_review_boost_admin_import_csv',
        'access callback' => '_review_boost_admin_access',
        //'type' => MENU_NORMAL_ITEM,
        'file' => 'review_boost.admin.inc',
    );

    $items['admin/survey/settings'] = array(
        'title' => 'Review Boost settings',
        'description' => 'Administration for Review Boost',
        'page callback' => '_review_boost_admin',
        'access callback' => '_review_boost_admin_access',
        'file' => 'review_boost.admin.inc',
    );

    $items['admin/survey/sample'] = array(
        'title' => 'Survey Sample CSV',
        'description' => 'survey sample csv',
        'page callback' => '_review_boost_admin_sample_csv',
        'access callback' => '_review_boost_admin_access',
        'file' => 'review_boost.admin.inc',
        'type' => MENU_CALLBACK
    );

    $items['admin/survey/%/result'] = array(
        'title' => 'Survey Result',
        'description' => 'survey result',
        'page callback' => '_review_boost_admin_survey_result',
        'page arguments' => array(2),
        'access callback' => '_review_boost_admin_access',
        'type' => MENU_CALLBACK,
        'file' => 'review_boost.admin.inc',
    );

    $items['admin/survey/results'] = array(
        'title' => 'Survey Results',
        'description' => 'Answered surveys',
        'page callback' => '_review_boost_admin_survey_results',
        'access callback' => '_review_boost_admin_access',
        'file' => 'review_boost.admin.inc',
    );

    $items['admin/survey/results/csv'] = array(
        'title' => 'Download CSV',
        'description' => 'survey results csv',
        'page callback' => '_review_boost_admin_results_csv',
        'access callback' => '_review_boost_admin_access',
        'file' => 'review_boost.admin.inc',
        'type' => MENU_LOCAL_ACTION
    );
    
    

    return $items;
}

/**
 * Implements hook_theme().
 */
function review_boost_theme($existing, $type, $theme, $path)
{
    $template_path = drupal_get_path('module', 'review_boost') . '/templates';
    
    return array(
        'review_boost_questionnaire' => array(
            'variables' => array(
                'form' => null,
            ),
            'template' => 'review_boost_questionnaire',
            'path' => $template_path,
        ),
        'review_boost_expired' => array(
            'variables' => array(
                'company_email' => null,
                'signoff' => null,
            ),
            'template' => 'review_boost_expired',
            'path' => $template_path,
        ),
        'review_boost_complete' => array(
            'variables' => array(
                'request_review' => false,
            ),
            'template' => 'review_boost_complete',
            'path' => $template_path,
        ),
        'review_boost_admin_import_csv' => array(
            'variables' => array(
                'form' => null,
            ),
            'template' => 'review_boost_admin_import_csv',
            'path' => $template_path,
        ),
        'review_boost_email_request' => array(
            'variables' => array(
                'customer_name' => null,
                'company_name' => null,
                'company_signoff' => null,
                'survey_link' => null
            ),
            'template' => 'review_boost_email_request',
            'path' => $template_path,
        ),
        'review_boost_email_signoff' => array(
            'variables' => array(
                'company_name' => null,
                'street' => null,
                'street2' => null,
                'locality' => null,
                'province' => null,
                'postal_code' => null,
                'phone_number' => null,
            ),
            'template' => 'review_boost_email_signoff',
            'path' => $template_path,
        ),
        'review_boost_settings' => array(
            'variables' => array(
                'form' => null,
            ),
            'template' => 'review_boost_settings',
            'path' => $template_path,
        ),
        'review_boost_survey_result' => array(
            'variables' => array(
                'fields' => array(),
            ),
            'template' => 'review_boost_survey_result',
            'path' => $template_path,
        ),
        'review_boost_survey_results' => array(
            'variables' => array(
                'results' => array(),
                'pager' => null,
                'totals' => array()
            ),
            'template' => 'review_boost_survey_results',
            'path' => $template_path,
        ),
        'review_boost_complete_default' => array(
            'variables' => array(
                'request_review' => false,
            ),
            'template' => 'review_boost_complete_default',
            'path' => $template_path,
        ),
    );
}

/**
 * Implements hook_permission
 */
function review_boost_permission() {
    return array(
        'administer_review_boost' => array(
            'title' => t('Administer Review Boost'),
        )
    );
}

/**
 * Implements hook_cron_queue_info().
 */
function review_boost_cron_queue_info() {
    return array(
        'review_boost_email_worker' => array(
            'worker callback' => '_review_boost_email_worker',
            'time' => 60 * 15,
        ),
    );
}

function _review_boost_get_customer_email(){


    if(module_exists('smtp')) {
        $allow_html = variable_get('smtp_allowhtml', false);
    }
    else {
        $allow_html = false;
    }


    $body = theme('review_boost_email_request');

    if(!$allow_html) {
        $body = preg_replace('/<.?\/?br.?>/',"\r\n\t" , $body);
        $body = drupal_html_to_text($body);
    }

    return $body;
}

function _review_boost_get_signoff() {

    $company_name = variable_get('sprowt_settings_company_name', variable_get('coal_admin_company_name', variable_get('site_name')));
    $signoff_array = (function_exists('_sprowt_settings_get_address')) ? _sprowt_settings_get_address() : array(
        'street' => variable_get('coal_admin_address_street', false),
        'street2' => variable_get('coal_admin_address_additional', false),
        'locality' => variable_get('coal_admin_address_locality', false),
        'province' => variable_get('coal_admin_address_province', false),
        'postal_code' => variable_get('coal_admin_address_postal_code', false),
    );

    if(function_exists('sprowt_settings_get_phone_number')) {
        $phone = sprowt_settings_get_phone_number();
    }
    else {
        $phone = (function_exists('coal_admin_get_phone_number')) ? coal_admin_get_phone_number() : false;
    }

    $signoff_array['phone_number'] = $phone;
    $signoff_array['company_name'] = $company_name;
    $signoff = theme('review_boost_email_signoff', $signoff_array);

    return $signoff;
}

function _review_boost_translate_values($str, $token, $additional_trans = array()) {
    global $base_url;
    $data = db_query("
        SELECT *
        FROM review_boost_token
        WHERE token = :token
    ", array(
        ':token' => $token
    ))->fetchAssoc();

    if(empty($data)) {
        watchdog('review_boost', 'No data found for token: $token! No email sent!',array(
            '%token' => $token
        ),'error');
        return false;
    }

    $survey_link = $base_url . '/customer-survey/' . $token;

    $trans = array(
        '%customer_id' => $data['customer_id'],
        '%customer_first_name' => $data['first_name'],
        '%customer_last_name' => $data['last_name'],
        '%customer_email' => $data['email'],
        '%technician' => $data['tech'],
        '%sales' => $data['sales'],
        '%branch' => $data['branch'],
        '%survey_link' => $survey_link,
        '%site_email' => variable_get('site_mail')
    );

    if(function_exists('sprowt_settings_get_phone_number')) {
        $trans['%company_phone'] = sprowt_settings_get_phone_number();
    }
    else if(function_exists('coal_admin_get_phone_number')) {
        $trans['%company_phone'] = coal_admin_get_phone_number();
    }
    else {
        $trans['%company_phone'] = '';
    }


    $company_name = variable_get('sprowt_settings_company_name', variable_get('coal_admin_company_name', variable_get('site_name')));

    $trans['%company_name'] = $company_name;

    if(function_exists('_sprowt_settings_get_address')) {
        $address = _sprowt_settings_get_address();
        $address_array = array(
            '%street' => $address['street'],
            '%street2' => '',
            '%locality' => $address['locality'],
            '%province' => $address['province'],
            '%postal_code' => $address['postal_code'],
        );
    }
    else {
        $address_array = array(
            '%street' => variable_get('coal_admin_address_street', ''),
            '%street2' => variable_get('coal_admin_address_additional', ''),
            '%locality' => variable_get('coal_admin_address_locality', ''),
            '%province' => variable_get('coal_admin_address_province', ''),
            '%postal_code' => variable_get('coal_admin_address_postal_code', ''),
        );
    }



    $trans = array_merge($trans, $address_array);

    $tz = new DateTimeZone(date_default_timezone(true));
    $service_date = new DateTime(date('c', $data['service_date']), $tz);

    $trans['%service_date'] = $service_date->format('Y/m/d');
    $trans['%service'] = $data['service'];


    $trans = array_merge($trans, $additional_trans);

    foreach($trans as $t => $value) {
        $str = str_replace($t, $value , $str);
    }

    return $str;
}

function review_boost_mail($key, &$message, $params) {
    if(module_exists('smtp')) {
        $allow_html = variable_get('smtp_allowhtml', false);
    }
    else {
        $allow_html = false;
    }

    if($allow_html) {
        $headers = array(
            'MIME-Version'              => '1.0',
            'Content-Type'              => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
            'Content-Transfer-Encoding' => '8Bit',
            'X-Mailer'                  => 'Drupal'
        );

        $message['headers'] = $headers;
    }
    switch($key) {
        case 'survey_email':
            $data = array(
                '%from_email' => $message['from']
            );

            $message['subject'] = variable_get('review_boost_customer_subject', 'How did we do?');

            $message['subject'] = _review_boost_translate_values($message['subject'], $params['data']['token']);

            $customer_email_body = variable_get('review_boost_customer_body');

            if(!empty($customer_email_body)) {
                if(is_array($customer_email_body)) {
                    $customer_email_body = $customer_email_body['value'];
                }

                if(!$allow_html) {
                    $customer_email_body = drupal_html_to_text($customer_email_body);
                }
            }
            else {

                $customer_email_body = _review_boost_get_customer_email();
            }

            $body = _review_boost_translate_values($customer_email_body, $params['data']['token'], $data);

            $message['body'][] = $body;
            break;
        case 'admin_email':
            global $base_url;

            $survey_link = $base_url . '/admin/survey/' . $params['token'] . '/result';


            $data = array(
                '%rating' => $params['rating'],
                '%comments' => $params['comments'],
                '%survey_link' => $survey_link,
                '%from_email' => $message['from']
            );

            $message['subject'] = variable_get('review_boost_admin_subject', 'A new ReviewBoost survey has been filled out');

            $message['subject'] = _review_boost_translate_values($message['subject'], $params['token'], $data);

            $admin_email_body = variable_get('review_boost_admin_body');

            if(!empty($admin_email_body)) {
                if(is_array($admin_email_body)) {
                    $admin_email_body = $admin_email_body['value'];
                }
            }
            else {
                $admin_email_body = _review_boost_get_default_admin_email_body();
            }

            if(!$allow_html) {
                $admin_email_body = drupal_html_to_text($admin_email_body);
            }
            else {
                $data['%comments'] = nl2br($data['%comments']);
            }

            $body = _review_boost_translate_values($admin_email_body, $params['token'], $data);

            $message['body'][] = $body;
    }
}

function _review_boost_email_worker($item) {
    $from_email = variable_get('review_boost_customer_from_email', variable_get('site_mail'));
    $message = drupal_mail('review_boost', 'survey_email', $item['data']['customer_email'], LANGUAGE_NONE, $item, $from_email, true);
}

function _review_boost_questionnaire($token) {
    // Query for the token id to see if it's valid and to pass to the form
    $result = db_query('SELECT tid FROM {review_boost_token} WHERE token = :token', array(
        'token' => $token,
    ))->fetchAssoc();

    $exists = db_query("
        SELECT count(*)
        FROM review_boost_result
        WHERE tid = :tid
    ", array(
        ':tid' => $result['tid']
    ))->fetchField();

    if($exists) {
        drupal_set_title('Survey Expired');
        $signoff = _review_boost_get_signoff();
        return theme('review_boost_expired', array(
            'company_email' => variable_get('site_mail'),
            'signoff' => $signoff
        ));
    }


    // If the query returns false, throw a 404
    if (!$result) {
        return MENU_NOT_FOUND;
    }

    // Pass the form to the template and render the page
    return theme('review_boost_questionnaire', array(
        'form' => drupal_get_form('_review_boost_questionnaire_form', $result['tid']),
    ));
}

function _review_boost_questionnaire_form($form, $form_state, $tid) {
    $path = drupal_get_path('module', 'review_boost');

    $form['hidden']['tid'] = array(
        '#type' => 'hidden',
        '#default_value' => $tid,
    );

    $form['service_rating'] = array(
        '#type' => 'hidden',
        //'#required' => true,
        '#attributes' => array(
            'id' => array(
                'backingServiceRating',
            ),
        ),
    );

    $form['rateit'] = array(
        '#title' => t('Overall, how would you rate your satisfaction with our service?'),
        '#type' => 'markup',
        '#markup' => '<div id="rateit" class="rateit bigstars" data-rateit-backingfld="#backingServiceRating" data-rateit-starwidth="32" data-rateit-starheight="32"></div>',
        '#weight' => 2,
    );

    $form['service_comments'] = array(
        '#resizable' => FALSE,
        '#type' => 'textarea',
        '#title' => t("Additional Thoughts?"),
        '#weight' => 4,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Finish Survey',
        '#weight' => 100,
        '#limit_validation_errors' => array(array()),
    );

    // Add JS
    $form['#attached']['js'] = array(
        $path . '/js/jquery.rateit.js',
        $path . '/js/review_boost.js',
    );

    // Add CSS
    $form['#attached']['css'] = array(
        $path . '/css/rateit.css',
        $path . '/css/review_boost.css',
    );

    return $form;
}

function _review_boost_questionnaire_form_validate($form, &$form_state) {
    if (empty($form_state['values']['service_rating'])) {
        form_set_error('service_rating', 'Please select a rating');
    }
}

function _review_boost_questionnaire_form_submit($form, &$form_state) {
    $result = db_query('SELECT token FROM {review_boost_token} WHERE tid = :tid', array(
        ':tid' => $form_state['values']['tid'],
    ))->fetchAssoc();

    db_insert('review_boost_result')
        ->fields(array(
            'tid' => $form_state['values']['tid'],
            'service_rating' => $form_state['values']['service_rating'],
            'service_comments' => $form_state['values']['service_comments'],
            'creation_date' => time(),
        ))
        ->execute();

    _review_boost_send_admin_email($result['token'], $form_state['values']['service_rating'], $form_state['values']['service_comments']);

    drupal_goto('customer-survey/'.$result['token'].'/thank-you');
}

function _review_boost_send_admin_email($token, $rating, $comments) {
    $to = variable_get('review_boost_admin_email', variable_get('site_mail'));

    $data = array(
        'token' => $token,
        'rating' => $rating,
        'comments' => $comments
    );

    drupal_mail('review_boost', 'admin_email', $to, LANGUAGE_NONE, $data);
}


function _review_boost_questionnaire_complete_default($high = false) {

    return theme('review_boost_complete_default', array(
        'request_review' => $high,
        'gplus_url' => variable_get('sprowt_settings_gplus_url', variable_get('coal_admin_gplus_url', false)),
        'bbb_url' => variable_get('sprowt_settings_bbb_url', variable_get('coal_admin_bbb_url', false)),
        'company_email' => variable_get('site_mail'),
        'signoff' => _review_boost_get_signoff()
    ));
}

function _review_boost_questionnaire_complete($token) {
    $result = db_query('SELECT t.token,r.* FROM review_boost_token t RIGHT JOIN review_boost_result r ON r.tid = t.tid WHERE t.token = :token', array(
        'token' => $token,
    ))->fetchAssoc();

    if (!$result) {
        return MENU_NOT_FOUND;
    }

    $high = $result['service_rating'] >= 3;

    if($high) {
        $title = variable_get('review_boost_thank_you_high_title', 'We’re so glad you enjoyed your service!');
        $content_val = variable_get('review_boost_thank_you_high_content');
        if(empty($content_val['value'])) {
            $content_val = array('value' => _review_boost_questionnaire_complete_default(true));
        }
    }
    else {
        $title = variable_get('review_boost_thank_you_low_title', 'Thank you for your response!');
        $content_val = variable_get('review_boost_thank_you_low_content');
        if(empty($content_val['value'])) {
            $content_val = array('value' => _review_boost_questionnaire_complete_default(false));
        }
    }

    $content = $content_val['value'];

    if(function_exists('_sprowt_settings_shortcode_replace')) {
        $title = _sprowt_settings_shortcode_replace($title);
        $content = _sprowt_settings_shortcode_replace($content);
    }

    $extra_trans = array(
        '%rating' => $result['service_rating'],
        '%comments' => nl2br($result['service_comments'])
    );

    $title = _review_boost_translate_values($title, $token, $extra_trans);
    $content = _review_boost_translate_values($content, $token, $extra_trans);

    return theme('review_boost_complete', array(
        'request_review' => $high,
        'title' => $title,
        'content' => $content
    ));
}


function _review_boost_admin_access() {
    global $user;

    $logged_in = $user->uid;

    $administer_survey = user_access('administer_review_boost');

    return ($logged_in && $administer_survey);
}

function _review_boost_get_options() {
    return array(
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
    );
}

function _review_boost_generate_token() {
    return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        mt_rand(0, 0xffff), mt_rand(0, 0xffff),
        mt_rand(0, 0xffff),
        mt_rand(0, 0x0fff) | 0x4000,
        mt_rand(0, 0x3fff) | 0x8000,
        mt_rand(0, 0xffff),
        mt_rand(0, 0xffff),
        mt_rand(0, 0xffff)
    );
}

function _review_boost_get_default_admin_email_body(){
    if(module_exists('smtp')) {
        $allow_html = variable_get('smtp_allowhtml', false);
    }
    else {
        $allow_html = false;
    }

    $tokens = array(
        '%customer_id',
        '%customer_first_name',
        '%customer_last_name',
        '%customer_email',
        '%technician',
        '%sales',
        '%branch',
        '%service',
        '%service_date',
        '%survey_link',
    );

    $admin_email_body = "<p>A new survey has come in with the following results:</p>";
    $admin_email_body .= '<ul><li><b>rating</b>: %rating</li><li><b>comments</b>: %comments</li></ul>';
    $admin_email_body .= '<p>And the following customer info:</p><ul>';

    foreach($tokens as $t) {
        $admin_email_body .= '<li><b>' . str_replace('%', '' , $t) . '</b>: ' . $t . '</li>';
    }
    $admin_email_body .= '</ul>';

    if(!$allow_html) {
        $admin_email_body = drupal_html_to_text($admin_email_body);
    }

    return $admin_email_body;
}

function _review_boost_rand_words($count = 1, $clean = true){
    $words = simplexml_load_file('http://www.lipsum.com/feed/xml?amount='.$count.'&what=words&start=0')->lipsum;
    if($clean) {
        $words = str_replace('.','',strtolower($words));
    }
    $w_array = explode(' ', $words);
    if(count($w_array) > $count) {
        $w_array = array_splice($w_array, 0, $count);
    }
    return implode(' ', $w_array);
}