<?php
/**
 * Drupal 7 implementation of the Sprowt HD module
 */



if(!module_exists('sprowt_settings')) {
    /**
     * Implements hook_menu_alter().
     */
    function sprowt_hd_menu_alter(&$items) {
        $items['admin/config/sprowt'] = array(
            'title' => 'Sprowt',
            'description' => 'Sprowt',
            'page callback' => '_sprowt_admin_menu_block',
            'access arguments' => array('administer site configuration'),
            'file' => 'sprowt_settings.pages.inc',
            'position' => 'left',
        );
    
        $items['admin/config/sprowt/speedlead-settings'] = array(
            'title' => 'SpeedLead Settings',
            'description' => 'SpeedLead settings',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sprowt_hd_settings_admin'),
            'access arguments' => array('administer site configuration'),
            'type' => MENU_NORMAL_ITEM,
            'weight' => -50
        );
    }
    
    function _sprowt_admin_menu_block(){
        $item = menu_get_item();
        if ($content = system_admin_menu_block($item)) {
            $output = theme('admin_block_content', array('content' => $content));
        }
        else {
            $output = t('You do not have any administrative items.');
        }
        return $output;
    }
    
    function sprowt_hd_settings_admin() {
        $form = array();
    
        $form['sprowt_settings'] = array(
            '#type' => 'vertical_tabs'
        );
    
        $form['sprowt_ctm'] = array(
            '#type' => 'fieldset',
            '#title' => t('Call Tracking Metrics Integration'),
            '#collapsible' => true,
            '#collapsed' => false,
            '#group' => 'sprowt_settings'
        );
    
        $form['sprowt_ctm']['sprowt_ctm_account_id'] = array(
            '#type' => 'textfield',
            '#title' => t('Account ID'),
            '#default_value' => variable_get('sprowt_ctm_account_id'),
            '#size' => 10,
            '#maxlength' => 6,
            '#description' => t("CTM Account ID for the customer. Entering the account number will automatically generate the tracking code for you. Leave blank to disable tracking code."),
        );
    
        $form['sprowt_ctm']['sprowt_ctm_access_key'] = array(
            '#type' => 'textfield',
            '#title' => t('Access Key'),
            '#default_value' => variable_get('sprowt_ctm_access_key'),
            '#size' => 60,
            '#maxlength' => 128,
            '#description' => t("API credentials required for Sprowt HD to work. The access key can be found under account settings in CTM."),
        );
    
        $form['sprowt_ctm']['sprowt_ctm_secret_key'] = array(
            '#type' => 'textfield',
            '#title' => t('Secret Key'),
            '#default_value' => variable_get('sprowt_ctm_secret_key'),
            '#size' => 60,
            '#maxlength' => 128,
            '#description' => t("API credentials required for Sprowt HD to work. The secret key can be found under account settings in CTM."),
        );
    
        return system_settings_form($form);
    }
    
    
    /**
     * Implements hook_init().
     */
    function sprowt_hd_init()
    {
        drupal_add_js(array(
            'sprowt' => array(
                'ctmAccountId' => variable_get('sprowt_ctm_account_id'),
            )
        ), 'setting');
    }
    
    /**
     * Implements hook_preprocess_HOOK().
     */
    function sprowt_hd_preprocess_page(&$variables) {
        $path = current_path();
        if(!path_is_admin($path)) {
            drupal_add_js(drupal_get_path('module', 'sprowt_hd') . '/js/ctm.js');
        }
    }
}


/**
 * Implements hook_menu().
 */
function sprowt_hd_menu()
{
    $items['node/%webform_menu/webform/configure-sprowt-hd'] = array(
        'title' => 'Sprowt SpeedLead',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sprowt_hd_webform_form_settings', 1),
        'access callback' => 'node_access',
        'access arguments' => array('update', 1),
        'weight' => 10,
        'type' => MENU_LOCAL_TASK,
        'file' => 'sprowt_hd_webform.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_form_alter().
 */
function sprowt_hd_form_alter(&$form, &$form_state, $form_id)
{
    if (strpos($form_id, 'webform_client_form') !== false) {
        if (!empty($form['#node'])) {
            $node = $form['#node'];
            $form_reactor_data = db_query('SELECT * FROM sprowt_hd_webform WHERE nid = :nid', array(
                ':nid' => $node->nid,
            ))->fetchAssoc();

            if ($form_reactor_data) {

                $form_reactor_data['customFields'] = _sprowt_hd_get_custom_fields($node->nid);

                $form_state['webform']['form_reactor'] = $form_reactor_data;
                if ($form_reactor_data['form_reactor_enabled'] && !empty($form_reactor_data['form_reactor_id'])) {
                    $form['submitted']['ctm_sid'] = array(
                        '#type' => 'hidden',
                        '#weight' => 100,
                    );
                    $form['#submit'][] = '_sprowt_hd_submit';
                }
            }
        }
    }
}

function _sprowt_hd_submit($form, &$form_state)
{
    // Grab the variables for CTM. These can be set in the Sprowt Settings
    $account_id = variable_get('sprowt_ctm_account_id');
    $access_key = variable_get('sprowt_ctm_access_key');
    $secret_key = variable_get('sprowt_ctm_secret_key');

    // If any of the variables are empty, no need to continue.
    if (empty($account_id) || empty($access_key) || empty($secret_key)) {
        // Let the developer know we are missing something
        watchdog('SpeedLead', 'Sprowt SpeedLead form reactor cannot communicate with CTM because the account id, access key and/or secret, key is not set', array(), WATCHDOG_ERROR);
        return;
    }
    
    $form_reactor_data = $form_state['webform']['form_reactor'];

    $apiUrl = 'https://api.calltrackingmetrics.com/api/v1/formreactor/' . $form_reactor_data['form_reactor_id'];
    
    $values = _sprowt_hd_extract_values_from_form_state($form, $form_state);
    

    // Check to see if the submission has a phone number
    if (array_key_exists($form_reactor_data['form_reactor_phone_field'], $values)) {
        // Format the customer name
        if ($form_reactor_data['form_reactor_last_name_field'] != '') {
            if (array_key_exists($form_reactor_data['form_reactor_first_name_field'], $values)) {
                $customer_name = ($values[$form_reactor_data['form_reactor_first_name_field']]);
                if (array_key_exists($form_reactor_data['form_reactor_last_name_field'], $values) && $values[$form_reactor_data['form_reactor_last_name_field']]) {
                    $customer_name .= ' ' . $values[$form_reactor_data['form_reactor_last_name_field']];
                }
            }
            else {
                $customer_name = 'Unknown';
            }
        }
        else {
            $customer_name = (array_key_exists($form_reactor_data['form_reactor_first_name_field'], $values)) ? $values[$form_reactor_data['form_reactor_first_name_field']] : 'Unknown';
        }

        //Set the Organic Fields so we can update the recently created call in CTM
        $organicFields = [];
        $mappedCustomFields = [];

        if(array_key_exists($form_reactor_data['form_reactor_address_field'],$values)){
          $organicFields['street'] = $values[$form_reactor_data['form_reactor_address_field']];
        }

      if(array_key_exists($form_reactor_data['form_reactor_state_field'],$values)){
        $organicFields['state'] = $values[$form_reactor_data['form_reactor_state_field']];
      }

      if(array_key_exists($form_reactor_data['form_reactor_zip_field'],$values)){
        $organicFields['postal_code'] = $values[$form_reactor_data['form_reactor_zip_field']];
      }

      if(array_key_exists($form_reactor_data['form_reactor_city_field'],$values)){
        $organicFields['city'] = $values[$form_reactor_data['form_reactor_city_field']];
      }


        // Build an array of the payload for the Curl POST
        $ctmData = array(
            'caller_name' => $customer_name,
            'country_code' => 1,
            'phone_number' => preg_replace('/.*(\d{3})[^\d]{0,7}(\d{3})[^\d]{0,7}(\d{4}).*/', '$1$2$3', $values[$form_reactor_data['form_reactor_phone_field']]), // Will format it correctly in most cases. You'd really have to screw up the phone number for this to fail...
            'email' => $values[$form_reactor_data['form_reactor_email_field']],
            'visitor_sid' => $values['ctm_sid'],
        );

        foreach($form_reactor_data['customFields'] as $customField) {
            if(!empty($values[$customField['field']])) {

              //we check for the fieldId first. If it exists then we know this custom field will posted via the form reactor endpoint
              if(!empty($customField['fieldId'])){
                $ctmData['custom_' . $customField['fieldId']] = $values[$customField['field']];
              }
              //no fieldId exists which means we are mapping this field to a custom field. We will use the call/modify endpoint for these.
              else{
                $mappedCustomFields[$customField['mapToField']."___".$customField['field']] = $values[$customField['field']];
              }

            }
        }


        // Compatibility with older Sprowt sites
        if (function_exists('sprowt_settings_get_phone_number')) {
            $ctmData['callback_number'] = sprowt_settings_get_phone_number();
        }
        elseif (function_exists('coal_admin_get_phone_number')) {
            $ctmData['callback_number'] = coal_admin_get_phone_number();
        }


        // Convert the payload to query
        $payload = http_build_query($ctmData, '', '&');

        // Begin the Curl Request
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $apiUrl);
        curl_setopt($ch, CURLOPT_USERPWD, $access_key . ':' . $secret_key);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLINFO_HEADER_OUT, true);

        $response = json_decode(curl_exec($ch), true);

        //set values for fetching the call in CTM
        $trackbackID = $response['trackback_id'];
        handleCtmFields($trackbackID,$organicFields,$mappedCustomFields);//get the recently created call and update it with the forms city,state,address,and zip.


        curl_close($ch);

        if (is_array($response)) {
            if (empty($response['status']) || (!empty($response['status']) && $response['status'] != 'success')) {
                watchdog('SpeedLead', 'Sprowt SpeedLead form reactor failed due to an error. Here is the response from CTM: %message', array('%message' => '<pre>' . print_r($response, true) . '</pre>'), WATCHDOG_ERROR);
            }
        }
        else {
            watchdog('SpeedLead', 'Sprowt SpeedLead form reactor failed due to an error. Here is the response from CTM: %message', array('%message' => '<pre>' . print_r($response, true) . '</pre>'), WATCHDOG_ERROR);
        }
    }
}

function handleCtmFields($trackbackID,$oFields,$cFields){
  if(!empty($oFields) && $trackbackID !== null || !empty($cFields) && $trackbackID !==null){
    $account_id = variable_get('sprowt_ctm_account_id');
    $filterEndpoint = "https://api.calltrackingmetrics.com/api/v1/accounts/".$account_id."/calls.json?filter=".$trackbackID;

    //first we fetch the call based on the trackback_id. We'll get the most recent item in the array which should be the most recent created call for the form
    $curlGet = curlHandler($filterEndpoint,[],'get');

    //check for errors
    if(!empty($curlGet['code'])){
      watchdog('CTM_ERROR', 'Error getting the CTM resource. Here is the response from CTM: %message', array('%message' => '<pre>' . print_r($curlGet, true) . '</pre>'), WATCHDOG_ERROR);
      return null;
    }

    $call = $curlGet['calls'][0];
    $currTime = time();
    $formSubmittedTime = $call['unix_time'];
    $timeDiff = $currTime - $formSubmittedTime;

    //since ctm is slow to update the calls list, we are going to use recursion to check if the most recent call is less than 30 seconds old. If it is, we fetch that call id
    if($timeDiff >=30){
      return handleCtmFields($trackbackID,$oFields,$cFields);
    }else{
      $callID = $call['id'];
      $modifyEndpoint = "https://api.calltrackingmetrics.com/api/v1/accounts/".$account_id."/calls/".$callID."/modify";

      //handle custom fields
      $formattedCFields = handleCtmCustomFields($cFields);
      $fields = array_merge_recursive($oFields,$formattedCFields);

      $curlPost = curlHandler($modifyEndpoint,$fields,'post');

      if(!empty($curlPost['code'])){
        watchdog('CTM_ERROR', 'Error posting the resource to CTM. Here is the response from CTM: %message', array('%message' => '<pre>' . print_r($curlPost, true) . '</pre>'), WATCHDOG_ERROR);
        return null;
      }

      return $curlPost;//success
    }
  }
  else{
    return null;
  }
}

function handleCtmCustomFields($cFields){
  $customFields = [];
  if(!empty($cFields)){
    foreach($cFields as $cKey => $cVal){
      $parsed = explode("___",$cKey);
      if(!empty($customFields["custom_fields"])){
        if(array_key_exists($parsed[0],$customFields["custom_fields"])){
          $customFields["custom_fields"][$parsed[0]] .= ",\n".$parsed[1].":".$cVal;
        }
        else{
          if(canBeFormatted($parsed[0])){
            $customFields["custom_fields"][$parsed[0]] = $parsed[1].":".$cVal;
          }
          else{
            $customFields["custom_fields"][$parsed[0]] = $cVal;
          }

        }
      }
      else{
        if(canBeFormatted($parsed[0])){
          $customFields["custom_fields"][$parsed[0]] = $parsed[1].":".$cVal;
        }
        else{
          $customFields["custom_fields"][$parsed[0]] = $cVal;
        }
      }
    }
  }

  return $customFields;

}

function canBeFormatted($key){
  $format = false;
  switch($key){
    case "webform_comments":
      $format = true;
      break;
  }
  return $format;
}

function curlHandler($endpoint,$data,$method){
  $access_key = variable_get('sprowt_ctm_access_key');
  $secret_key = variable_get('sprowt_ctm_secret_key');

  // Convert the payload to query
  $payload = http_build_query($data, '', '&');

  // Begin the Curl Request
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $endpoint);
  curl_setopt($ch, CURLOPT_USERPWD, $access_key . ':' . $secret_key);
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  switch($method) {
    case 'post':
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
      break;
    case 'put':
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
      break;
    case 'patch':
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PATCH");
      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
      break;
    case 'delete':
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
      break;
    default:
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
  }
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_HEADER, false);
  curl_setopt($ch, CURLINFO_HEADER_OUT, true);

  $response = curl_exec($ch);
  $httpInfo = curl_getinfo($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);


  if(empty($response)){
    $httpInfo['error'] = curl_error($ch);
    $httpInfo['errorno'] = curl_errno($ch);
  }
  curl_close($ch);

  if($httpcode === 200 || $httpcode === 201){
    $result = json_decode($response,true);
    return $result;
  }
  else{
    return array(
      'info' => $httpInfo,
      'code' => $httpcode,
      'result' => $response,
      'response' => $response
    );
  }



}

function _sprowt_hd_extract_values_from_form_state($form, $form_state) {
    $raw_values = $form_state['values']['submitted'];
    $webform = $form['#node']->webform;
    $webform_componenents = $webform['components'];
    $components = array();
    foreach($webform_componenents as $cid => $v) {
        $components[$cid] = $v['form_key'];
    }

    return _sprowt_hd_extract_values_using_webform_components($components, $raw_values);
}

function _sprowt_hd_extract_values_using_webform_components($components, $raw_values) {
    $values = array();
    foreach($raw_values as $cid => $v) {
        if(!empty($components[$cid])) {
            $values[$components[$cid]] = $v;
        }
        else {
            if(is_array($v)) {
                $more_values = _sprowt_hd_extract_values_using_webform_components($components, $v);
                $values = array_merge($values, $more_values);
            }
            else {
                $values[$cid] = $v;
            }
        }
    }

    return $values;
}

function _sprowt_hd_get_custom_fields($nid) {
    $records = db_query("
      SELECT * 
      FROM {sprowt_hd_webform_custom_fields}
      WHERE nid = :nid
    ", [
        ':nid' => $nid
    ])->fetchAll(PDO::FETCH_ASSOC);

    $fields = [];
    if(!empty($records)) {
        foreach ($records as $record) {
            $fields[] = [
                'fieldId' => trim($record['field_id']),
                'field' => $record['webform_field'],
                'mapToField' =>$record['map_to_field'],
            ];
        }
    }

    return $fields;
}