<?php
/**
 * Drupal 7 implementation of the Sprowt HD module
 */



if(!module_exists('sprowt_settings')) {
    /**
     * Implements hook_menu_alter().
     */
    function sprowt_hd_menu_alter(&$items) {
        $items['admin/config/sprowt'] = array(
            'title' => 'Sprowt',
            'description' => 'Sprowt',
            'page callback' => '_sprowt_admin_menu_block',
            'access arguments' => array('administer site configuration'),
            'file' => 'sprowt_settings.pages.inc',
            'position' => 'left',
        );
    
        $items['admin/config/sprowt/speedlead-settings'] = array(
            'title' => 'SpeedLead Settings',
            'description' => 'SpeedLead settings',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sprowt_hd_settings_admin'),
            'access arguments' => array('administer site configuration'),
            'type' => MENU_NORMAL_ITEM,
            'weight' => -50
        );
    }
    
    function _sprowt_admin_menu_block(){
        $item = menu_get_item();
        if ($content = system_admin_menu_block($item)) {
            $output = theme('admin_block_content', array('content' => $content));
        }
        else {
            $output = t('You do not have any administrative items.');
        }
        return $output;
    }
    
    function sprowt_hd_settings_admin() {
        $form = array();
    
        $form['sprowt_settings'] = array(
            '#type' => 'vertical_tabs'
        );
    
        $form['sprowt_ctm'] = array(
            '#type' => 'fieldset',
            '#title' => t('Call Tracking Metrics Integration'),
            '#collapsible' => true,
            '#collapsed' => false,
            '#group' => 'sprowt_settings'
        );
    
        $form['sprowt_ctm']['sprowt_ctm_account_id'] = array(
            '#type' => 'textfield',
            '#title' => t('Account ID'),
            '#default_value' => variable_get('sprowt_ctm_account_id'),
            '#size' => 10,
            '#maxlength' => 6,
            '#description' => t("CTM Account ID for the customer. Entering the account number will automatically generate the tracking code for you. Leave blank to disable tracking code."),
        );
    
        $form['sprowt_ctm']['sprowt_ctm_access_key'] = array(
            '#type' => 'textfield',
            '#title' => t('Access Key'),
            '#default_value' => variable_get('sprowt_ctm_access_key'),
            '#size' => 60,
            '#maxlength' => 128,
            '#description' => t("API credentials required for Sprowt HD to work. The access key can be found under account settings in CTM."),
        );
    
        $form['sprowt_ctm']['sprowt_ctm_secret_key'] = array(
            '#type' => 'textfield',
            '#title' => t('Secret Key'),
            '#default_value' => variable_get('sprowt_ctm_secret_key'),
            '#size' => 60,
            '#maxlength' => 128,
            '#description' => t("API credentials required for Sprowt HD to work. The secret key can be found under account settings in CTM."),
        );
    
        return system_settings_form($form);
    }
    
    
    /**
     * Implements hook_init().
     */
    function sprowt_hd_init()
    {
        drupal_add_js(array(
            'sprowt' => array(
                'ctmAccountId' => variable_get('sprowt_ctm_account_id'),
            )
        ), 'setting');
    }
    
    /**
     * Implements hook_preprocess_HOOK().
     */
    function sprowt_hd_preprocess_page(&$variables) {
        drupal_add_js(drupal_get_path('module', 'sprowt_hd') . '/js/ctm.js');
    }
}


/**
 * Implements hook_menu().
 */
function sprowt_hd_menu()
{
    $items['node/%webform_menu/webform/configure-sprowt-hd'] = array(
        'title' => 'Sprowt SpeedLead',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sprowt_hd_webform_form_settings', 1),
        'access callback' => 'node_access',
        'access arguments' => array('update', 1),
        'weight' => 10,
        'type' => MENU_LOCAL_TASK,
        'file' => 'sprowt_hd_webform.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_form_alter().
 */
function sprowt_hd_form_alter(&$form, &$form_state, $form_id)
{
    if (strpos($form_id, 'webform_client_form') !== false) {
        if ($node = menu_get_object()) {
            $form_reactor_data = db_query('SELECT * FROM sprowt_hd_webform WHERE nid = :nid', array(
                ':nid' => $node->nid,
            ))->fetchAssoc();

            if ($form_reactor_data) {
                $form_state['webform']['form_reactor'] = $form_reactor_data;
                if ($form_reactor_data['form_reactor_enabled'] && !empty($form_reactor_data['form_reactor_id'])) {
                    $form['submitted']['ctm_sid'] = array(
                        '#type' => 'hidden',
                        '#weight' => 100,
                    );
                    $form['#submit'][] = '_sprowt_hd_submit';
                }
            }
        }
    }
}

function _sprowt_hd_submit($form, &$form_state)
{
    // Grab the variables for CTM. These can be set in the Sprowt Settings
    $account_id = variable_get('sprowt_ctm_account_id');
    $access_key = variable_get('sprowt_ctm_access_key');
    $secret_key = variable_get('sprowt_ctm_secret_key');

    // If any of the variables are empty, no need to continue.
    if (empty($account_id) || empty($access_key) || empty($secret_key)) {
        // Let the developer know we are missing something
        watchdog('error', 'Sprowt SpeedLead form reactor cannot communicate with CTM because the account id, access key and/or secret, key is not set', array(), WATCHDOG_ERROR);
        return;
    }
    
    $form_reactor_data = $form_state['webform']['form_reactor'];

    $apiUrl = 'https://api.calltrackingmetrics.com/api/v1/formreactor/' . $form_reactor_data['form_reactor_id'];
    
    $values = _sprowt_hd_extract_values_from_form_state($form, $form_state);
    

    // Check to see if the submission has a phone number
    if (array_key_exists($form_reactor_data['form_reactor_phone_field'], $values)) {
        // Format the customer name
        if ($form_reactor_data['form_reactor_last_name_field'] != '') {
            if (array_key_exists($form_reactor_data['form_reactor_first_name_field'], $values)) {
                $customer_name = ($values[$form_reactor_data['form_reactor_first_name_field']]);
                if (array_key_exists($form_reactor_data['form_reactor_last_name_field'], $values) && $values[$form_reactor_data['form_reactor_last_name_field']]) {
                    $customer_name .= ' ' . $values[$form_reactor_data['form_reactor_last_name_field']];
                }
            }
            else {
                $customer_name = 'Unknown';
            }
        }
        else {
            $customer_name = (array_key_exists($form_reactor_data['form_reactor_first_name_field'], $values)) ? $values[$form_reactor_data['form_reactor_first_name_field']] : 'Unknown';
        }

        // Build an array of the payload for the Curl POST
        $ctmData = array(
            'caller_name' => $customer_name,
            'country_code' => 1,
            'phone_number' => preg_replace('/.*(\d{3})[^\d]{0,7}(\d{3})[^\d]{0,7}(\d{4}).*/', '$1$2$3', $values[$form_reactor_data['form_reactor_phone_field']]), // Will format it correctly in most cases. You'd really have to screw up the phone number for this to fail...
            'email' => $values[$form_reactor_data['form_reactor_email_field']],
            'visitor_sid' => $values['ctm_sid'],
        );

        // Compatibility with older Sprowt sites
        if (function_exists('sprowt_settings_get_phone_number')) {
            $ctmData['callback_number'] = sprowt_settings_get_phone_number();
        }
        elseif (function_exists('coal_admin_get_phone_number')) {
            $ctmData['callback_number'] = coal_admin_get_phone_number();
        }

        // Convert the payload to query
        $payload = http_build_query($ctmData, '', '&');

        // Begin the Curl Request
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $apiUrl);
        curl_setopt($ch, CURLOPT_USERPWD, $access_key . ':' . $secret_key);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLINFO_HEADER_OUT, true);

        $response = json_decode(curl_exec($ch), true);

        curl_close($ch);

        if (is_array($response)) {
            if ($response['status'] == 'error') {
                if (isset($response['text'])) {
                    watchdog('error', 'Sprowt SpeedLead form reactor failed due to an error. Here is the response from CTM: %message', array('%message' => $response['text']), WATCHDOG_ERROR);
                }
            }
        }
    }
}

function _sprowt_hd_extract_values_from_form_state($form, $form_state) {
    $raw_values = $form_state['values']['submitted'];
    $webform = $form['#node']->webform;
    $webform_componenents = $webform['components'];
    $components = array();
    foreach($webform_componenents as $cid => $v) {
        $components[$cid] = $v['form_key'];
    }

    return _sprowt_hd_extract_values_using_webform_components($components, $raw_values);
}

function _sprowt_hd_extract_values_using_webform_components($components, $raw_values) {
    $values = array();
    foreach($raw_values as $cid => $v) {
        if(!empty($components[$cid])) {
            $values[$components[$cid]] = $v;
        }
        else {
            if(is_array($v)) {
                $more_values = _sprowt_hd_extract_values_using_webform_components($components, $v);
                $values = array_merge($values, $more_values);
            }
            else {
                $values[$cid] = $v;
            }
        }
    }

    return $values;
}
