<?php
require_once drupal_get_path('module', 'pestpac_api') . '/PestPacApi.php';
require_once drupal_get_path('module', 'pestpac_api') . '/PestPacOauth.php';
/**
 * Implements hook_menu().
 */
function tech_forms_menu() {
  $items = [];
  $items['node/%webform_menu/webform/configure-tech-forms'] = [
    'title' => 'Tech Forms Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tech_forms_webform_settings', 1],
    'access callback' => 'node_access',
    'access arguments' => ['update', 1],
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  ];

  return $items;
}

function tech_forms_webform_settings($form, $form_state, $node) {

  $admin_values = _tech_forms_admin_value($node->nid);

  $form['nid'] = [
    '#type' => 'hidden',
    '#value' => $node->nid,
  ];

  $form['tech_forms_enabled'] = [
    '#title' => t('Enable Tech Form Integration'),
    '#type' => 'checkbox',
    '#weight' => 0,
    '#default_value' => $admin_values['tech_forms_enabled'],
  ];

  $form['submit'] = [
    '#weight' => 100,
    '#type' => 'submit',
    '#value' => ('Save Configuration'),
  ];


  $form['#submit'][] = 'tech_forms_webform_settings_submit';

  return $form;

}

function tech_forms_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    $form['#prefix'] = '<div id="tech-form-results">';
    $form['#suffix'] = '</div>';
    if (!empty($form["submitted"]["location_number"])) {
      $form["submitted"]["location_number"]["#ajax"] = [
        "callback" => "tech_forms_location_number_callback",
        'wrapper' => 'tech-form-results',
      ];
    }
  }
}

/**
 * Checks if the global array tech_forms contains a specific nid.
 * If the array contains the nid, it fetches the associated saved field data
 * for the particular node.
 * If no nid is present (i.e. you are enabling a new webform) it sets the
 * values to their defaults for that nid.
 *
 * @param $nid
 *
 * @return array
 */
function _tech_forms_admin_value($nid) {
  $tech_forms = variable_get('tech_forms', []);
  $values = [
    'tech_forms_enabled' => FALSE,
  ];
  if (!empty($tech_forms[$nid])) {
    $values = $tech_forms[$nid];
  }

  return $values;
}

function techFormComponents() {
  $components = [
    [
      'name' => 'Location Number',
      'form_key' => 'location_number',
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => -50,
      'pid' => 0,
      'value' => '',
      'required' => 1,
      'disabled' => 0
    ],
    [
      'name' => 'First Name',
      'form_key' => 'first_name',
      'type' => 'textfield',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
    [
      'name' => 'Last Name',
      'form_key' => 'last_name',
      'type' => 'textfield',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
    [
      'name' => 'Customer Email',
      'form_key' => 'customer_email',
      'type' => 'email',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
  ];

  return $components;

}

function syncTechFormComponents($node, $components) {
  module_load_include('inc', 'webform', 'includes/webform.components');
  if (!empty($node)) {
    $currComponents = $node->webform['components'];

    foreach ($components as $cKey => $cVal) {
      $found = FALSE;
      foreach ($currComponents as $currKey => $currVal) {
        if ($cVal["form_key"] === $currVal["form_key"]) {
          $found = TRUE; //component found so we won't add it to the webform
        }
      }
      if (!$found) {
        $cVal['nid'] = $node->nid;
        $cVal['machine_name'] = "__" . $cVal["form_key"];
        $node->webform['components'][] = $cVal;
        webform_component_insert($cVal);
      }
    }
  }


}

/**
 * Takes a Location Number associated with a PestPac location and returns
 * the location array.
 *
 * @param $locationNum
 *  An INT containing a PestPac Location Code (location number)
 * @return array|mixed
 *  An array containing a PestPac Location
 */
function fetchPestPacLocationByNum($locationNum){
  $pp = new PestPacApi();
  $existingLoc = end($pp->checkLocationExists($locationNum));
  $locID = $existingLoc["LocationID"];
  $entity = [
    "name" => "Locations",
    "id" => $locID
  ];

  $location = $pp->get($entity);

  return $location;
}

function tech_forms_location_number_callback($form, $form_state) {
  if (!empty($form["submitted"]["location_number"]["#value"])) {
    $locationNum = $form["submitted"]["location_number"]["#value"];
    $hasNameFieldSet = FALSE;
    $hasContactFieldSet = FALSE;

    //set first name (because the first name field may not be under the "name" fieldset
    if ($form["submitted"]["name"]) {
      $hasNameFieldSet = TRUE;
    }
    if ($form["submitted"]["contact"]) {
      $hasContactFieldSet = TRUE;
    }

    $ppLocation = fetchPestPacLocationByNum($locationNum);
    if (!$ppLocation["code"]) {

      //check if name fieldset exists
      if ($hasNameFieldSet) {
        $form["submitted"]["name"]["first_name"]["#value"] = $ppLocation["FirstName"];
        $form["submitted"]["name"]["last_name"]["#value"] = $ppLocation["LastName"];
      }
      else {
        $form["submitted"]["first_name"]["#value"] = $ppLocation["FirstName"];
        $form["submitted"]["last_name"]["#value"] = $ppLocation["LastName"];
      }

      //check if contact fieldset exists
      if ($hasContactFieldSet) {
        $form["submitted"]["contact"]["customer_email"]["#value"] = $ppLocation["EMail"];
      }
      else {
        $form["submitted"]["customer_email"]["#value"] = $ppLocation["EMail"];
      }

    }
    else if($ppLocation["code"] && $ppLocation["code"] === 401){
      form_set_error("Tech Forms Authenticate","We had to authenticate with PestPac. Please try again.");
    }
    else {
      form_set_error("Tech Forms Error", "Invalid Location Number!");
    }

  }
  else {
    form_set_error("Tech Forms Error", "Location Number is required!");
  }

  $form_state['rebuild'] = TRUE;
  return $form;
}


function tech_forms_webform_settings_submit($form, $form_state) {
  $values = $form_state['values'];
  $nid = $values['nid'];
  $node = node_load($nid);
  syncTechFormComponents($node, techFormComponents());
  unset($values['nid']);

  $tech_forms = variable_get('tech_forms', []);
  $tech_forms[$nid] = $values;

  variable_set('tech_forms', $tech_forms);
}


