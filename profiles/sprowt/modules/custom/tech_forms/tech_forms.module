<?php
require_once drupal_get_path('module', 'pestpac_api') . '/PestPacApi.php';
require_once drupal_get_path('module', 'pestpac_api') . '/PestPacOauth.php';
require_once drupal_get_path('module', 'pestpac_api') . '/PestPac.php';
/**
 * Implements hook_menu().
 */
function tech_forms_menu() {
  $items = [];
  $items['node/%webform_menu/webform/configure-tech-forms'] = [
    'title' => 'Tech Forms Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tech_forms_webform_settings', 1],
    'access callback' => 'node_access',
    'access arguments' => ['update', 1],
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  ];

  return $items;
}

function tech_forms_webform_settings($form, $form_state, $node) {

  $admin_values = _tech_forms_admin_value($node->nid);

  $form['nid'] = [
    '#type' => 'hidden',
    '#value' => $node->nid,
  ];

  $form['tech_forms_enabled'] = [
    '#title' => t('Enable Tech Form Integration'),
    '#type' => 'checkbox',
    '#weight' => 0,
    '#default_value' => $admin_values['tech_forms_enabled'],
  ];

  $form['submit'] = [
    '#weight' => 100,
    '#type' => 'submit',
    '#value' => ('Save Configuration'),
  ];


  $form['#submit'][] = 'tech_forms_webform_settings_submit';

  return $form;

}

function tech_forms_theme(){
  $template_path = drupal_get_path('module','tech_forms') . '/templates';
  return array(
    'tech_forms_page' => [
      'base hook' => 'page',
      'template' => 'tech-forms-page',
      'path' => $template_path
    ]
  );
}

/**
 * Implements hook_preprocess_page
 * Checks to see if the tech_forms module has been enabled on the node
 * If it has, check to see if some menus are set. If the menus are set, unset them.
 *
 *
 * @param $variables
 */
function tech_forms_preprocess_page(&$variables){

  $nid = $variables["node"]->nid;
  $hasTechForms = variable_get('tech_forms',[]);

  if($hasTechForms[$nid]){

    //it's a tech form. override the default page.tpl.php with our new one.
    $variables['theme_hook_suggestions'] = array_merge($variables['theme_hook_suggestions'],array('tech_forms_page'));

    if(isset($variables["page"]["header_first"]["menu_menu-mobile-utility"])){
      unset($variables["page"]["header_first"]["menu_menu-mobile-utility"]);
    }
    if(isset($variables["page"]["footer_third"]["menu_menu-mobile-footer"])){
      unset($variables["page"]["footer_third"]["menu_menu-mobile-footer"]);
    }
    if(isset($variables["page"]["header_first"]["menu_block_1"])){
      unset($variables["page"]["header_first"]["menu_block_1"]);
    }
    if(isset($variables["page"]["header_first"]["menu_block_2"])){
      unset($variables["page"]["header_first"]["menu_block_2"]);
    }

  }
}

/**
 * Implements hook_preprocess_html
 * Checks to see if the tech_forms module has been enabled on the node.
 * If it has, add 'tech-form' to the body class and add custom nav styling.
 *
 * @param $variables
 */
function tech_forms_preprocess_html(&$variables){
  $node = menu_get_object();
  $nid = $node->nid;
  $hasTechForms = variable_get('tech_forms',[]);
  if($hasTechForms[$nid]){
    $path = drupal_get_path('module', 'tech_forms');
    $variables["classes_array"][] = "tech-form";
    drupal_add_css($path . '/css/tech_forms.styles.css');
    drupal_add_css($path . '/css/tech_forms.colors.css');
  }
}

function tech_forms_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    $form['#prefix'] = '<div id="tech-form-results">';
    $form['#suffix'] = '</div>';
    if (!empty($form["submitted"]["location_number"])) {
      $form["submitted"]["location_number"]["#ajax"] = [
        "callback" => "tech_forms_location_number_callback",
        'wrapper' => 'tech-form-results',
      ];
      $form['#submit'][]='tech_forms_webform_submit';
    }
  }
  return $form;
}

function tech_forms_webform_submit(&$form,&$form_state){
 $nid = $form["#node"]->nid;
 $test = $form_state;
  $hasTechForms = variable_get('tech_forms',[]);
  if($hasTechForms[$nid]){
    $keepOrPass = $form["submitted"]["keep_or_pass"]["#value"];
    $createLead = $form["submitted"]["create_a_lead"]["#value"];

    if($createLead === "yes"){
      $fields = mapLeadFields($form,$nid);
      $lead = createLead($fields);
      drupal_set_message("Lead Has Been Created In PestPac!");
    }

  }
}

//where does technician phone go?
function mapLeadFields($form,$nid){
  $fields = new StdClass();
  $fields->firstName = $form["submitted"]["first_name"]["#value"];
  $fields->lastName = $form["submitted"]["last_name"]["#value"];
  $fields->email = $form["submitted"]["customer_email"]["#value"];
  $fields->name = $fields->firstName . " " . $fields->lastName;
  $fields->tPest = $form["submitted"]["issues_and_location"]["select"]["#value"];
  $fields->source = $form["submitted"]["lead_source"]["#value"];
  $fields->service = $form["submitted"]["recommended_solution"]["#value"];
  $fields->pendingEvent = $form["submitted"]["pending_event"]["#value"];

  /*
   * if keep, pop salesperson and lead form field
   * if pass, pop lead form field
   */
  $fields->salesPerson = $form["submitted"]["technician_crm_username"]["#value"]; //crm username
  $fields->day = $form["submitted"]["follow_up_date_pending_date"]["#value"]["day"];
  $fields->month = $form["submitted"]["follow_up_date_pending_date"]["#value"]["month"];
  $fields->year = $form["submitted"]["follow_up_date_pending_date"]["#value"]["year"];
  $date = formatDate($fields->year,$fields->month,$fields->day);
  $fields->pendingDate = $date;
  $fields->webformLink = $GLOBALS['base_url']."/".$nid;
  $fields->notes = $form["submitted"]["notes"]["#value"];

  return $fields;
}

/**
 * Takes a given year, month, and day and returns an ISO 8601 date timestamp
 * with the current server time and timezone
 * Notes: PestPac requires an ISO 8601 date timestamp in order to successfully create a resource.
 *
 * @param $year
 *  String containing a year
 * @param $month
 *  String containing a month
 * @param $day
 *  String containing a day
 *
 * @return false|string
 *  Returns a string containing the formatted date and time
 */
function formatDate($year,$month,$day){
  $date = date_parse($year."-".$month."-".$day);
  $time = date("H:i:s");
  $time = date_parse($time);

  $formattedTime = date('c',mktime($time["hour"],$time["minute"],$time["second"],$date["month"],$date["day"],$date["year"]));

  return $formattedTime;

}

function createLead($fields) {
  $ppLoc = variable_get("pp_location");


  //change CreateLocation to true when ready
  $ppLead = [
    "LeadID" => 0,
    "LocationID" => $ppLoc["LocationID"],
    "CreateLocation" => FALSE,
    "Branch" => "Charlotte",
    "LeadType" => "Lead",
    "WonStatus" => "New",
    "DateReceived" => date(DATE_ATOM),
    "DateClosed" => "",
    "CloseReason" => "",
    "Name" => $fields->name,
    "Company" => "",
    "Address" => $ppLoc["Address"],
    "Address2" => "",
    "City" => $ppLoc["City"],
    "State" => $ppLoc["State"],
    "Zip" => $ppLoc["Zip"],
    "Country" => "US",
    "Phone" => $ppLoc["Phone"],
    "PhoneExtension" => "",
    "Fax" => "",
    "FaxExtension" => "",
    "AlternatePhone" => "",
    "AlternatePhoneExtension" => "",
    "MobilePhone" => "",
    "MobilePhoneExtension" => "",
    "EMail" => $fields->email,
    "LocationType" => "",
    "Source" => $fields->source,
    "LeadCost" => "0",
    "ServiceCode" => "",
    "Salesperson" => $fields->salesPerson,
    "TargetPest" => $fields->tPest,
    "ProposalValue" => "0",
    "SalesStatus" => "",
    "PendingEvent" => $fields->pendingEvent,
    "PendingEventDate" => $fields->pendingDate,
    "TimeRange" => "",
    "Duration" => "0",
    "Comment" => "",
    "UserDefinedFields" => [
      [
        "Caption" => "NA",
        "Value" => "NA",
      ],
    ],
    "Latitude" => $ppLoc["Latitude"],
    "Longitude" => $ppLoc["Longitude"]
  ];
  $ppc = new PestPacOauth('password');

  $pp = new PestPacApi();
  $request = null;
  try {
    $request = $pp->leadResource("/Leads", $ppLead);

  } catch (Exception $e) {
    watchdog('CTM_PestPac_Sync_Error', 'Trouble creating lead in pestpac. More info: %e', [
      '%e' => $e,
    ]);
  }
  return $request;
}

/**
 * Checks if the global array tech_forms contains a specific nid.
 * If the array contains the nid, it fetches the associated saved field data
 * for the particular node.
 * If no nid is present (i.e. you are enabling a new webform) it sets the
 * values to their defaults for that nid.
 *
 * @param $nid
 *
 * @return array
 */
function _tech_forms_admin_value($nid) {
  $tech_forms = variable_get('tech_forms', []);
  $values = [
    'tech_forms_enabled' => FALSE,
  ];
  if (!empty($tech_forms[$nid])) {
    $values = $tech_forms[$nid];
  }

  return $values;
}

function techFormComponents() {
  $components = [
    [
      'name' => 'Location Number',
      'form_key' => 'location_number',
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => -50,
      'pid' => 0,
      'value' => '',
      'required' => 1,
      'disabled' => 0
    ],
    [
      'name' => 'First Name',
      'form_key' => 'first_name',
      'type' => 'textfield',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
    [
      'name' => 'Last Name',
      'form_key' => 'last_name',
      'type' => 'textfield',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
    [
      'name' => 'Customer Email',
      'form_key' => 'customer_email',
      'type' => 'email',
      'mandatory' => 0,
      'weight' => 0,
      'pid' => 0,
      'value' => '',
      'extra' => [
        'disabled' => 1
      ]
    ],
  ];

  return $components;

}

function syncTechFormComponents($node, $components) {
  module_load_include('inc', 'webform', 'includes/webform.components');
  if (!empty($node)) {
    $currComponents = $node->webform['components'];

    foreach ($components as $cKey => $cVal) {
      $found = FALSE;
      foreach ($currComponents as $currKey => $currVal) {
        if ($cVal["form_key"] === $currVal["form_key"]) {
          $found = TRUE; //component found so we won't add it to the webform
        }
      }
      if (!$found) {
        $cVal['nid'] = $node->nid;
        $cVal['machine_name'] = "__" . $cVal["form_key"];
        $node->webform['components'][] = $cVal;
        webform_component_insert($cVal);
      }
    }
  }


}

/**
 * Takes a Location Number associated with a PestPac location and returns
 * the location array.
 *
 * @param $locationNum
 *  An INT containing a PestPac Location Code (location number)
 * @return array|mixed
 *  An array containing a PestPac Location
 */
function fetchPestPacLocationByNum($locationNum){
  $pp = new PestPacApi();
  $existingLoc = end($pp->checkLocationExists($locationNum));
  $locID = $existingLoc["LocationID"];
  variable_set("pp_location",$existingLoc);
  $entity = [
    "name" => "Locations",
    "id" => $locID
  ];

  $location = $pp->get($entity);

  return $location;
}

function tech_forms_location_number_callback($form, $form_state) {
  if (!empty($form["submitted"]["location_number"]["#value"])) {
    $locationNum = $form["submitted"]["location_number"]["#value"];
    $hasNameFieldSet = FALSE;
    $hasContactFieldSet = FALSE;

    //set first name (because the first name field may not be under the "name" fieldset
    if ($form["submitted"]["name"]) {
      $hasNameFieldSet = TRUE;
    }
    if ($form["submitted"]["contact"]) {
      $hasContactFieldSet = TRUE;
    }

    $ppLocation = fetchPestPacLocationByNum($locationNum);
    if (!$ppLocation["code"]) {

      //check if name fieldset exists
      if ($hasNameFieldSet) {
        $form["submitted"]["name"]["first_name"]["#value"] = $ppLocation["FirstName"];
        $form["submitted"]["name"]["last_name"]["#value"] = $ppLocation["LastName"];
      }
      else {
        $form["submitted"]["first_name"]["#value"] = $ppLocation["FirstName"];
        $form["submitted"]["last_name"]["#value"] = $ppLocation["LastName"];
      }

      //check if contact fieldset exists
      if ($hasContactFieldSet) {
        $form["submitted"]["contact"]["customer_email"]["#value"] = $ppLocation["EMail"];
      }
      else {
        $form["submitted"]["customer_email"]["#value"] = $ppLocation["EMail"];
      }

    }
    else if($ppLocation["code"] && $ppLocation["code"] === 401){
      form_set_error("Tech Forms Authenticate","We had to authenticate with PestPac. Please try again.");
    }
    else {
      form_set_error("Tech Forms Error", "Invalid Location Number!");
    }

  }
  else {
    form_set_error("Tech Forms Error", "Location Number is required!");
  }

  $form_state['rebuild'] = TRUE;
  return $form;
}


function tech_forms_webform_settings_submit($form, $form_state) {
  $values = $form_state['values'];
  $nid = $values['nid'];
  $node = node_load($nid);
  syncTechFormComponents($node, techFormComponents());
  unset($values['nid']);

  $tech_forms = variable_get('tech_forms', []);
  $tech_forms[$nid] = $values;

  variable_set('tech_forms', $tech_forms);
}


