<?php
/**
 * @file
 * Install, update and uninstall functions for the standard installation profile.
 */

require_once('sprowtbuilder.php');

/**
 * Add install tasks
 * implements hook_install_tasks()
 */
function sprowt_install_tasks(&$install_state) {
    $tasks = array (
        'sprowt_setup_tables' => array(),
        'sprowt_configure' => array(),
        'sprowt_module_preinstall' => array(),
        'sprowt_module_postinstall' => array(),
        'sprowt_install_from_file' => array(
            'display_name' => t('Would You Like to Install From a File?'),
            'type' => 'form',
        ),
        'sprowt_is_starter' => array(
            'display_name' => t('Is This a Sprowt Starter Roll Out?'),
            'type' => 'form',
        ),
        'sprowt_starter_choose_page' => array(
            'display_name' => t('Choose a Landing Page'),
            'type' => 'form',
        ),
        'sprowt_company_info' => array(
            'display_name' => t('Company Info'),
            'type' => 'form',
        ),
        'sprowt_market_setup' => array(
            'display_name' => t('Market Setup'),
            'type' => 'form',
        ),
        'sprowt_branding' => array(
            'display_name' => t('Branding Setup'),
            'type' => 'form',
        ),
        'sprowt_users' => array(
            'display_name' => t('Users Setup'),
            'type' => 'form',
        ),
        'sprowt_locations' => array(
            'display_name' => t('Locations Setup'),
            'type' => 'form',
        ),
        'sprowt_social' => array(
            'display_name' => t('Social Media Setup'),
            'type' => 'form',
        ),
        'sprowt_review' => array(
            'display_name' => t('Review Sites Setup'),
            'type' => 'form',
        ),
        'sprowt_integrations' => array(
            'display_name' => t('Integration Setup'),
            'type' => 'form',
        ),
        'sprowt_save_file' => array(
            'display_name' => t('Save To File'),
            'type' => 'form',
        ),
        'sprowt_setup_form' => array(
            'display_name' => t('Setting Up Sprowt'),
            'type' => 'form',
        ),
        'sprowt_check_install' => array(
            'display_name' => t('There was an error with your Sprowt Install'),
            'type' => 'form',
        ),
        'sprowt_reset_localtarget_aliases' => array(
            'display_name' => t('Updated LocalTarget URL Aliases'),
            'type' => 'batch',
        )
    );

    if(!empty($install_state['forms']['file'])){
        $new_tasks = array(
            'sprowt_drush_presetup' => array(),
            'sprowt_setup_tables' => array(),
            'sprowt_configure' => array(),
            'sprowt_drush_setup' => array(),
            'sprowt_module_preinstall' => array(),
            'sprowt_module_postinstall' => array(),
            'sprowt_setup' => array()
        );
        $tasks = $new_tasks;
    }

    return $tasks;
}


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function sprowt_install() {
    // Add text formats.
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);

    $full_html_format = array(
        'format' => 'full_html',
        'name' => 'Full HTML',
        'weight' => 1,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 1,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $full_html_format = (object) $full_html_format;
    filter_format_save($full_html_format);

    // Insert default pre-defined node types into the database. For a complete
    // list of available node type attributes, refer to the node type API
    // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
    $types = array(
        array(
            'type' => 'page',
            'name' => st('Basic page'),
            'base' => 'node_content',
            'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
        array(
            'type' => 'article',
            'name' => st('Article'),
            'base' => 'node_content',
            'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );

    foreach ($types as $type) {
        $type = node_type_set_defaults($type);
        node_type_save($type);
        node_add_body_field($type);
    }

    // Insert default pre-defined RDF mapping into the database.
    $rdf_mappings = array(
        array(
            'type' => 'node',
            'bundle' => 'page',
            'mapping' => array(
                'rdftype' => array('foaf:Document'),
            ),
        ),
        array(
            'type' => 'node',
            'bundle' => 'article',
            'mapping' => array(
                'field_image' => array(
                    'predicates' => array('og:image', 'rdfs:seeAlso'),
                    'type' => 'rel',
                ),
                'field_tags' => array(
                    'predicates' => array('dc:subject'),
                    'type' => 'rel',
                ),
            ),
        ),
    );
    foreach ($rdf_mappings as $rdf_mapping) {
        rdf_mapping_save($rdf_mapping);
    }

    // Default "Basic page" to not be promoted and have comments disabled.
    variable_set('node_options_page', array('status'));
    variable_set('comment_page', COMMENT_NODE_HIDDEN);

    // Don't display date and author information for "Basic page" nodes by default.
    variable_set('node_submitted_page', FALSE);

    // Enable user picture support and set the default to a square thumbnail option.
    variable_set('user_pictures', '1');
    variable_set('user_picture_dimensions', '1024x1024');
    variable_set('user_picture_file_size', '800');
    variable_set('user_picture_style', 'thumbnail');

    // Allow visitor account creation with administrative approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

    // Create a default vocabulary named "Tags", enabled for the 'article' content type.
    $description = st('Use tags to group articles on similar topics into categories.');
    $vocabulary = (object) array(
        'name' => st('Tags'),
        'description' => $description,
        'machine_name' => 'tags',
    );
    taxonomy_vocabulary_save($vocabulary);

    $field = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'type' => 'taxonomy_term_reference',
        // Set cardinality to unlimited for tagging.
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'settings' => array(
            'allowed_values' => array(
                array(
                    'vocabulary' => $vocabulary->machine_name,
                    'parent' => 0,
                ),
            ),
        ),
    );
    field_create_field($field);

    $help = st('Enter a comma-separated list of words to describe your content.');
    $instance = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'entity_type' => 'node',
        'label' => 'Tags',
        'bundle' => 'article',
        'description' => $help,
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
            'weight' => -4,
        ),
        'display' => array(
            'default' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
            'teaser' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
        ),
    );
    field_create_instance($instance);


    // Create an image field named "Image", enabled for the 'article' content type.
    // Many of the following values will be defaulted, they're included here as an illustrative examples.
    // See http://api.drupal.org/api/function/field_create_field/7

    $field = array(
        'field_name' => 'field_image',
        'type' => 'image',
        'cardinality' => 1,
        'locked' => FALSE,
        'indexes' => array('fid' => array('fid')),
        'settings' => array(
            'uri_scheme' => 'public',
            'default_image' => FALSE,
        ),
        'storage' => array(
            'type' => 'field_sql_storage',
            'settings' => array(),
        ),
    );
    field_create_field($field);


    // Many of the following values will be defaulted, they're included here as an illustrative examples.
    // See http://api.drupal.org/api/function/field_create_instance/7
    $instance = array(
        'field_name' => 'field_image',
        'entity_type' => 'node',
        'label' => 'Image',
        'bundle' => 'article',
        'description' => st('Upload an image to go with this article.'),
        'required' => FALSE,

        'settings' => array(
            'file_directory' => 'field/image',
            'file_extensions' => 'png gif jpg jpeg',
            'max_filesize' => '',
            'max_resolution' => '',
            'min_resolution' => '',
            'alt_field' => TRUE,
            'title_field' => '',
        ),

        'widget' => array(
            'type' => 'image_image',
            'settings' => array(
                'progress_indicator' => 'throbber',
                'preview_image_style' => 'thumbnail',
            ),
            'weight' => -1,
        ),

        'display' => array(
            'default' => array(
                'label' => 'hidden',
                'type' => 'image',
                'settings' => array('image_style' => 'large', 'image_link' => ''),
                'weight' => -1,
            ),
            'teaser' => array(
                'label' => 'hidden',
                'type' => 'image',
                'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
                'weight' => -1,
            ),
        ),
    );
    field_create_instance($instance);

    // Enable default permissions for system roles.
    $filtered_html_permission = filter_permission_name($filtered_html_format);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

    // Create a default role for site administrators, with all available permissions assigned.
    $admin_role = new stdClass();
    $admin_role->name = 'administrator';
    $admin_role->weight = 2;
    user_role_save($admin_role);
    user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
    // Set this as the administrator role.
    variable_set('user_admin_role', $admin_role->rid);

    // Assign user 1 the "administrator" role.
    db_insert('users_roles')
        ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
        ->execute();

    // Create a Home link in the main menu.
    $item = array(
        'link_title' => st('Home'),
        'link_path' => '<front>',
        'menu_name' => 'main-menu',
    );
    menu_link_save($item);

    // Update the menu router information.
    menu_rebuild();

    // Enable the admin theme.
    db_update('system')
        ->fields(array('status' => 1))
        ->condition('type', 'theme')
        ->condition('name', 'adminimal')
        ->execute();
    variable_set('admin_theme', 'adminimal');
    variable_set('node_admin_theme', '1');


    variable_set('image_allow_insecure_derivatives', true);

    //quick fix for messed up blocks in the db

    $bids = db_query("
    SELECT bid
    FROM block
    WHERE region = ''
  ")->fetchCol();

    if(!empty($bids)) {
        db_query("
      UPDATE block SET region = '-1'
      WHERE bid IN (:bids)
    ", array(':bids' => $bids));
    }
}

/**
 * Fix url aliases in database
 */
function sprowt_update_7001() {

    db_query("UPDATE node SET language = :language WHERE language = ''", array(':language' => LANGUAGE_NONE));

    $aliases = db_query("
    SELECT * FROM url_alias
    WHERE language = ''
  ")->fetchAll(PDO::FETCH_ASSOC);

    foreach($aliases as $alias) {
        $pid = db_query("
      SELECT pid
      FROM url_alias
      WHERE source = :source
      AND language != ''
    ",
            array(
                ':source' => $alias['source']
            ))->fetchField();

        if(!empty($pid)) {
            db_query("DELETE FROM url_alias WHERE pid = :pid", array(':pid' => $alias['pid']));
        }
        else {
            db_query("UPDATE url_alias SET language = :language WHERE pid = :pid", array(':language' => LANGUAGE_NONE, ':pid' => $alias['pid']));
        }
    }
}

/**
 * Update Users
 */
function sprowt_update_7002() {
    require_once drupal_get_path('profile', 'sprowt') . '/sprowtbuilder.php';
    $SB = new SprowtBuilder();
    $SB->updateUsers();
    variable_set('image_allow_insecure_derivatives', true);
    if (variable_get('maintenance_mode', 0)) {
        variable_set('maintenance_mode', 0);
    }
}

/**
 * Fix menu problems on current sprowt sites
 */

function sprowt_update_7003() {
    db_query("
    DELETE FROM menu_links WHERE menu_name = 'management' AND link_path LIKE 'node%'
  ")->execute();
}

/**
 * Enable new admin theme
 */

function sprowt_update_7004() {
    // Enable the admin theme.
    db_update('system')
        ->fields(array('status' => 1))
        ->condition('type', 'theme')
        ->condition('name', 'adminimal')
        ->execute();
    variable_set('admin_theme', 'adminimal');
    variable_set('node_admin_theme', '1');
    module_enable(array('adminimal_admin_menu'));
}

/***
 * Fix system table
 */

function sprowt_update_7005() {
    db_delete('system')->condition('name','fe_block')->execute();
}

/**
 * update registry to accomodate html_title location
 */
function sprowt_update_7006() {
    registry_rebuild();
}
/**
 * Add Privacy Policy
 */
function sprowt_update_7007(){
  $sb = new SprowtBuilder();
  $sb->importPrivacyPolicy();
}

/**
 * alter system table to accept longer text in the info column
 */
function sprowt_update_7008() {
    db_query("ALTER TABLE `system` CHANGE `info` `info` LONGBLOB NULL DEFAULT NULL")->execute();
}

/**
 * Enable HSTS (HTTP Strict Transport Security)
 */
function sprowt_update_7009() {
    $enabled = variable_get('hsts_enabled');
    $module_enabled = module_exists('hsts');
    if(!$module_enabled) {
        module_enable(array('hsts'));
    }

    if(empty($enabled)) {
        variable_set('hsts_enabled', 1);
    }
}

/**
 * Update jquery to 1.12
 */
function sprowt_update_7010() {
    variable_set('jquery_update_jquery_version', '1.12');
    variable_set('jquery_update_jquery_cdn', 'jquery');
}

/**
 * Disable progress bar on all webforms
 */
function sprowt_update_7011() {
    $nids = db_query("
        SELECT nid
        FROM node
        WHERE type = 'webform'
    ")->fetchCol();

    $nodes = node_load_multiple($nids);
    foreach($nodes as $node) {
        $node->webform['progressbar_bar'] = false;
        node_save($node);
    }
}

/**
 * import Privacy Policy if it doesn't exist
 */
function sprowt_update_7012() {
    $sb = new SprowtBuilder();
    $privacy = entity_uuid_load('node', ['6da1b988-5564-47a2-8404-72ec6aaa46ed']);
    if(empty($privacy)) {
        $sb->importPrivacyPolicy();
    }
}

/**
 * enable noindex module
 */
function sprowt_update_7013() {
    module_enable(['sprowt_noindex']);
}
